--autogenerated luajit bindings. do not edit.
local ffi = require("ffi")
ffi.cdef([[
typedef struct FILE FILE;
typedef long int ptrdiff_t;
typedef long unsigned int size_t;
 int less_64(uint64_t a, uint64_t b);
 int less_int(int a, int b);
 int less_ptr(void *a, void *b);
 int less_str(char *a, char *b);
 int less_64_ptr(const void *a, const void *b);
 int less_int_ptr(const void *a, const void *b);
 uint32_t unhash_32(uint32_t x);
 uint32_t hash_32(uint32_t x);
 uint64_t hash_64(uint64_t x);
 uint64_t hash_flt(double x);
 uint64_t hash_int(int key);
 uint64_t hash_ptr(const void* ptr);
 uint64_t hash_bin(const void* ptr, unsigned len);
 uint64_t hash_str(const char* str);
 uint64_t popcnt64(uint64_t x);
 void* vrealloc( void* p, size_t sz );
 size_t vlen( void* p );
  unsigned array_c_;
  unsigned array_n_;
typedef struct set_item {
    struct set_item *next;
    uint64_t keyhash;
    void *key;
    void *super;
} set_item;
typedef struct set {
    set_item** array;
    int (*cmp)(void *, void *);
    uint64_t (*hash)(void *);
    int count;
} set;
 void (set_init)(set *m);
 void (set_free)(set *m);
 void (set_insert)(set *m, set_item *p, void *key, uint64_t keyhash, void *super);
 void (set_erase)(set *m, void *key, uint64_t keyhash);
 void* (set_find)(const set *m, void *key, uint64_t keyhash);
 int (set_isempty)(const set *m);
 int (set_count)(const set *m);
 void (set_gc)(set *m);
 void (set_clear)(set* m);
typedef struct pair {
    struct pair *next;
    uint64_t keyhash;
    void *key;
    void *value;
    void *super;
} pair;
typedef struct map {
    pair** array;
    int (*cmp)(void *, void *);
    uint64_t (*hash)(void *);
    int count:31;
    int is_sorted:1;
    pair** sorted;
} map;
 void (map_init)(map *m);
 void (map_free)(map *m);
 void (map_insert)(map *m, pair *p, void *key, void *value, uint64_t keyhash, void *super);
 void (map_erase)(map *m, void *key, uint64_t keyhash);
 void* (map_find)(map *m, void *key, uint64_t keyhash);
 int (map_isempty)(map *m);
 int (map_count)(map *m);
 void (map_gc)(map *m);
 bool (map_sort)(map* m);
 void (map_clear)(map* m);
typedef union vec2i{ struct { int X,Y; }; struct { int x,y; }; struct { int r,g; }; struct { int w,h; }; struct { int min,max; }; struct { int from,to; }; struct { int src,dst; }; int v2[2]; int array[1]; } vec2i;
typedef union vec3i{ struct { int X,Y,Z; }; struct { int x,y,z; }; struct { int r,g,b; }; struct { int w,h,d; }; struct { int min,max; }; struct { int from,to,step; }; struct { int src,dst; }; int v3[3]; int array[1]; } vec3i;
typedef union vec2 { struct { float X,Y; }; struct { float x,y; }; struct { float r,g; }; struct { float w,h; }; struct { float min,max; }; struct { float from,to; }; struct { float src,dst; }; float v2[2]; float array[1]; } vec2;
typedef union vec3 { struct { float X,Y,Z; }; struct { float x,y,z; }; struct { float r,g,b; }; struct { float min,max; }; struct { float from,to; }; vec2 xy; vec2 rg; vec2 wh; float v3[3]; float array[1]; } vec3;
typedef union vec4 { struct { float X,Y,Z,W; }; struct { float x,y,z,w; }; struct { float r,g,b,a; }; struct { float min,max; }; struct { float from,to; }; vec2 xy; vec3 xyz; vec2 rg; vec3 rgb; vec2 wh; vec3 whd; float v4[4]; float array[1]; } vec4;
typedef union quat { struct { float X,Y,Z,W; }; struct { float x,y,z,w; }; vec3 xyz; vec4 xyzw; float v4[4]; float array[1]; } quat;
typedef float mat33[9];
typedef float mat34[12];
typedef float mat44[16];
 void randset(uint64_t state);
 uint64_t rand64(void);
 double randf(void);
 int randi(int mini, int maxi);
 float simplex1( float x );
 float simplex2( vec2 xy );
 float simplex3( vec3 xyz );
 float simplex4( vec4 xyzw );
 float deg (float radians);
 float rad (float degrees);
 float cycle180 (float angle);
 float cycle360 (float angle);
 int mini (int a, int b);
 int maxi (int a, int b);
 int absi (int a );
 int clampi (int v,int a,int b);
 float minf (float a, float b);
 float maxf (float a, float b);
 float absf (float a );
 float pmodf (float a, float b);
 float signf (float a) ;
 float clampf (float v,float a,float b);
 float mixf (float a,float b,float t);
 float unmixf (float a,float b,float t);
 float mapf (float x,float a,float b,float c,float d);
 float slerpf (float a,float b,float t);
 float fractf (float a);
 vec2 ptr2 (const float *a );
 vec2 neg2 (vec2 a );
 vec2 add2 (vec2 a, vec2 b);
 vec2 sub2 (vec2 a, vec2 b);
 vec2 mul2 (vec2 a, vec2 b);
 vec2 div2 (vec2 a, vec2 b);
 vec2 inc2 (vec2 a, float b);
 vec2 dec2 (vec2 a, float b);
 vec2 scale2 (vec2 a, float b);
 vec2 pmod2 (vec2 a, float b);
 vec2 min2 (vec2 a, vec2 b);
 vec2 max2 (vec2 a, vec2 b);
 vec2 abs2 (vec2 a );
 vec2 floor2 (vec2 a );
 vec2 fract2 (vec2 a );
 vec2 ceil2 (vec2 a );
 float dot2 (vec2 a, vec2 b);
 vec2 refl2 (vec2 a, vec2 b);
 float cross2 (vec2 a, vec2 b);
 float len2sq (vec2 a );
 float len2 (vec2 a );
 vec2 norm2 (vec2 a );
 int finite2 (vec2 a );
 vec2 mix2 (vec2 a,vec2 b,float t);
 vec2 clamp2(vec2 v,vec2 a,vec2 b);
 vec2 clamp2f(vec2 v,float a,float b);
 vec3 rnd3 (void);
 vec3 ptr3 (const float *a );
 vec3 vec23 (vec2 a, float z );
 vec3 neg3 (vec3 a );
 vec3 add3 (vec3 a, vec3 b);
 vec3 sub3 (vec3 a, vec3 b);
 vec3 mul3 (vec3 a, vec3 b);
 vec3 div3 (vec3 a, vec3 b);
 vec3 inc3 (vec3 a, float b);
 vec3 dec3 (vec3 a, float b);
 vec3 scale3 (vec3 a, float b);
 vec3 pmod3 (vec3 a, float b);
 vec3 min3 (vec3 a, vec3 b);
 vec3 max3 (vec3 a, vec3 b);
 vec3 abs3 (vec3 a );
 vec3 floor3 (vec3 a );
 vec3 fract3 (vec3 a );
 vec3 ceil3 (vec3 a );
 vec3 cross3 (vec3 a, vec3 b);
 float dot3 (vec3 a, vec3 b);
 vec3 refl3 (vec3 a, vec3 b);
 float len3sq (vec3 a );
 float len3 (vec3 a );
 vec3 norm3 (vec3 a );
 vec3 norm3sq (vec3 a );
 int finite3 (vec3 a );
 vec3 mix3 (vec3 a,vec3 b,float t);
 vec3 clamp3(vec3 v,vec3 a,vec3 b);
 vec3 clamp3f(vec3 v,float a,float b);
 void ortho3 (vec3 *left, vec3 *up, vec3 v);
 vec3 rotatex3 (vec3 dir, float degrees);
 vec3 rotatey3 (vec3 dir, float degrees);
 vec3 rotatez3 (vec3 dir, float degrees);
 vec4 ptr4 (const float *a );
 vec4 vec34 (vec3 a, float w );
 vec4 neg4 (vec4 a );
 vec4 add4 (vec4 a, vec4 b);
 vec4 sub4 (vec4 a, vec4 b);
 vec4 mul4 (vec4 a, vec4 b);
 vec4 div4 (vec4 a, vec4 b);
 vec4 inc4 (vec4 a, float b);
 vec4 dec4 (vec4 a, float b);
 vec4 scale4 (vec4 a, float b);
 vec4 pmod4 (vec4 a, float b);
 vec4 min4 (vec4 a, vec4 b);
 vec4 max4 (vec4 a, vec4 b);
 vec4 abs4 (vec4 a );
 vec4 floor4 (vec4 a );
 vec4 fract4 (vec4 a );
 vec4 ceil4 (vec4 a );
 float dot4 (vec4 a, vec4 b);
 vec4 refl4 (vec4 a, vec4 b);
 float len4sq (vec4 a );
 float len4 (vec4 a );
 vec4 norm4 (vec4 a );
 vec4 norm4sq (vec4 a );
 int finite4 (vec4 a );
 vec4 mix4 (vec4 a,vec4 b,float t);
 vec4 clamp4(vec4 v,vec4 a,vec4 b);
 vec4 clamp4f(vec4 v,float a,float b);
 quat idq ( );
 quat ptrq (const float *a );
 quat vec3q (vec3 a, float w );
 quat vec4q (vec4 a );
 quat negq (quat a );
 quat conjq (quat a );
 quat addq (quat a, quat b);
 quat subq (quat a, quat b);
 quat mulq (quat p, quat q);
 quat scaleq (quat a, float s);
 quat normq (quat a );
 float dotq (quat a, quat b);
 quat mixq(quat a, quat b, float t);
 quat slerpq(quat a, quat b, float s);
 quat rotationq(float deg,float x,float y,float z);
 quat mat44q (mat44 M);
 vec3 rotate3q_2(vec3 v, quat q);
 vec3 rotate3q(vec3 v, quat r);
 vec3 euler (quat q);
 quat eulerq (vec3 pyr_degrees);
 void scaling33(mat33 m, float x, float y, float z);
 void scale33(mat33 m, float x, float y, float z);
 void id33(mat33 m);
 void extract33(mat33 m, const mat44 m4);
 void copy33(mat33 m, const mat33 a);
 vec3 mulv33(mat33 m, vec3 v);
 void multiply33x2(mat33 m, const mat33 a, const mat33 b);
 void rotation33(mat33 m, float degrees, float x,float y,float z);
 void rotationq33(mat33 m, quat q);
 void rotate33(mat33 r, float degrees, float x,float y,float z);
 void compose33(mat33 m, quat r, vec3 s);
 void id34(mat34 m);
 void copy34(mat34 m, const mat34 a);
 void scale34(mat34 m, float s);
 void add34(mat34 m, mat34 n);
 void muladd34(mat34 m, mat34 n, float s);
 void add34x2(mat34 m, mat34 n, mat34 o);
 void lerp34(mat34 m, mat34 n, mat34 o, float alpha);
 void multiply34x2(mat34 m, const mat34 m0, const mat34 m1);
 void multiply34(mat34 m, const mat34 a);
 void multiply34x3(mat34 m, const mat34 a, const mat34 b, const mat34 c);
 void compose34(mat34 m, vec3 t, quat q, vec3 s);
 void invert34(mat34 m, const mat34 o);
 void id44(mat44 m);
 void identity44(mat44 m);
 void copy44(mat44 m, const mat44 a);
 void multiply44x2(mat44 m, const mat44 a, const mat44 b);
 void multiply44x3(mat44 m, const mat44 a, const mat44 b, const mat44 c);
 void multiply44(mat44 m, const mat44 a);
 void ortho44(mat44 m, float l, float r, float b, float t, float n, float f);
 void frustum44(mat44 m, float l, float r, float b, float t, float n, float f);
 void perspective44(mat44 m, float fovy_degrees, float aspect, float nearp, float farp);
 void lookat44(mat44 m, vec3 eye, vec3 center, vec3 up);
 vec3 pos44(mat44 m);
 void translation44(mat44 m, float x, float y, float z);
 void translate44(mat44 m, float x, float y, float z);
 void relocate44(mat44 m, float x, float y, float z);
 void rotationq44(mat44 m, quat q);
 void rotation44(mat44 m, float degrees, float x, float y, float z);
 void rotate44(mat44 m, float degrees, float x, float y, float z);
 void scaling44(mat44 m, float x, float y, float z);
 void scale44(mat44 m, float x, float y, float z);
 void transpose44(mat44 m, const mat44 a);
 float det44(const mat44 M);
 bool invert44(mat44 T, const mat44 M);
 void compose44(mat44 m, vec3 t, quat q, vec3 s);
 vec3 transformq(const quat q, const vec3 v);
 vec3 transform33(const mat33 m, vec3 p);
 vec3 transform344(const mat44 m, const vec3 p);
 vec4 transform444(const mat44 m, const vec4 p);
 bool unproject44(vec3 *out, vec3 xyd, vec4 viewport, mat44 mvp);
 void print2i( vec2i v );
 void print3i( vec3i v );
 void print2( vec2 v );
 void print3( vec3 v );
 void print4( vec4 v );
 void printq( quat q );
 void print33( float *m );
 void print34( float *m );
 void print44( float *m );
 uintptr_t id_make(void *ptr);
 void * id_handle(uintptr_t id);
 void id_dispose(uintptr_t id);
 bool id_valid(uintptr_t id);
    typedef struct obj { struct { const char *objname; uintptr_t objheader; struct obj** objchildren; }; } obj;
    typedef struct entity { struct { struct { const char *objname; uintptr_t objheader; struct obj** objchildren; }; uintptr_t cflags; void *c[32]; }; } entity;
  obj *objtmp;
void* obj_malloc(unsigned sz);
void* obj_free(void *o);
 extern void (*obj_ctor[256])();
 extern void (*obj_dtor[256])();
 extern char* (*obj_save[256])();
 extern bool (*obj_load[256])();
 extern int (*obj_test[256])();
 extern int (*obj_init[256])();
 extern int (*obj_quit[256])();
 extern int (*obj_tick[256])();
 extern int (*obj_draw[256])();
 extern int (*obj_lerp[256])();
 extern int (*obj_aabb[256])();
 extern int (*obj_edit[256])();
 extern int (*obj_menu[256])();
 extern char* (*obj_icon[256])();
 extern const char*OBJTYPES[256];
 uintptr_t obj_header(const void *o);
 uintptr_t obj_id(const void *o);
 const char* obj_type(const void *o);
 unsigned obj_typeid(const void *o);
 int obj_sizeof(const void *o);
 int obj_size(const void *o);
 char* obj_data(void *o);
 const char* obj_datac(const void *o);
 void* obj_payload(const void *o);
 void* obj_zero(void *o);
 void* obj_ref(void *oo);
 void* obj_unref(void *oo);
 obj* obj_detach(void *c);
 obj* obj_attach(void *o, void *c);
 obj* obj_root(const void *o);
 obj* obj_parent(const void *o);
 obj***obj_children(const void *o);
 obj***obj_siblings(const void *o);
 int obj_dumptree(const void *o);
 void* obj_setmeta(void *o, const char *key, const char *value);
 const char* obj_meta(const void *o, const char *key);
 void* obj_setname(void *o, const char *name);
 const char* obj_name(const void *o);
 void* obj_swap(void *dst, void *src);
 void* obj_copy_fast(void *dst, const void *src);
 void* obj_copy(void *dst, const void *src);
 int obj_comp_fast(const void *a, const void *b);
 int obj_comp(const void *a, const void *b);
 int obj_lesser(const void *a, const void *b);
 int obj_greater(const void *a, const void *b);
 int obj_equal(const void *a, const void *b);
 uint64_t obj_hash(const void *o);
 bool obj_hexdump(const void *oo);
 int obj_print(const void *o);
 int obj_printf(const void *o, const char *text);
 int obj_console(const void *o);
 char* obj_saveini(const void *o);
 obj* obj_mergeini(void *o, const char *ini);
 obj* obj_loadini(void *o, const char *ini);
 char* obj_savejson(const void *o);
 obj* obj_mergejson(void *o, const char *json);
 obj* obj_loadjson(void *o, const char *json);
 char* obj_savebin(const void *o);
 obj* obj_mergebin(void *o, const char *sav);
 obj* obj_loadbin(void *o, const char *sav);
 char* obj_savempack(const void *o);
 obj* obj_mergempack(void *o, const char *sav);
 obj* obj_loadmpack(void *o, const char *sav);
 int obj_push(const void *o);
 int obj_pop(void *o);
 bool obj_addcomponent(entity *e, unsigned c, void *ptr);
 bool obj_hascomponent(entity *e, unsigned c);
 void* obj_getcomponent(entity *e, unsigned c);
 bool obj_delcomponent(entity *e, unsigned c);
 bool obj_usecomponent(entity *e, unsigned c);
 bool obj_offcomponent(entity *e, unsigned c);
 char* entity_save(entity *self);
 void* obj_clone(const void *src);
 void* obj_merge(void *dst, const void *src);
 void* obj_mutate(void *dst, const void *src);
 void* obj_make(const char *str);
typedef enum OBJTYPE_BUILTINS {
    OBJTYPE_obj = 0,
    OBJTYPE_entity = 1,
    OBJTYPE_vec2 = 2,
    OBJTYPE_vec3 = 3,
    OBJTYPE_vec4 = 4,
    OBJTYPE_quat = 5,
    OBJTYPE_mat33 = 6,
    OBJTYPE_mat34 = 7,
    OBJTYPE_mat44 = 8,
    OBJTYPE_vec2i = 9,
    OBJTYPE_vec3i = 10,
} OBJTYPE_BUILTINS;
 int pathfind_astar(int width, int height, const unsigned* map, vec2i src, vec2i dst, vec2i* path, size_t maxpath);
typedef int (*bt_func)();
typedef struct bt_t {
    uint64_t type;
    int (*action)();
    union {
        int argi;
        float argf;
    };
    struct bt_t* children;
} bt_t;
 bt_t bt(const char *ini_file, unsigned flags);
 int bt_run(bt_t *b);
 void bt_addfun(const char *name, int(*func)());
 bt_func bt_findfun(const char *name);
 char *bt_funcname(bt_func fn);
 int ui_bt(bt_t *b);
typedef enum SWARM_DISTANCE {
    SWARM_DISTANCE_LINEAR,
    SWARM_DISTANCE_INVERSE_LINEAR,
    SWARM_DISTANCE_QUADRATIC,
    SWARM_DISTANCE_INVERSE_QUADRATIC
} SWARM_DISTANCE;
typedef struct boid_t {
    vec3 position;
    vec3 velocity;
    vec3 acceleration;
    vec3 prev_position;
} boid_t;
typedef struct swarm_t {
    boid_t* boids;
    float perception_radius;
    float separation_weight;
    SWARM_DISTANCE separation_type;
    float alignment_weight;
    float cohesion_weight;
    float steering_weight;
    vec3* steering_targets;
    SWARM_DISTANCE steering_target_type;
    float blindspot_angledeg;
    float max_acceleration;
    float max_velocity;
    struct { map base; struct { pair p; vec3* key; boid_t** val; } tmp, *ptr; boid_t*** tmpval; int (*typed_cmp)(vec3*, vec3*); uint64_t (*typed_hash)(vec3*); } * voxel_cache_;
    float blindspot_angledeg_compare_value_;
} swarm_t;
 swarm_t swarm();
 void swarm_update(swarm_t *self, float delta);
 void swarm_update_acceleration_only(swarm_t *self);
 void swarm_update_acceleration_and_velocity_only(swarm_t *self, float delta);
 int ui_swarm(swarm_t *self);
 void midi_send(unsigned midi_msg);
typedef struct audio_handle* audio_t;
 audio_t audio_clip( const char *pathfile );
 audio_t audio_stream( const char *pathfile );
 int audio_play( audio_t s, int flags );
 int audio_play_gain( audio_t a, int flags, float gain );
 int audio_play_gain_pitch( audio_t a, int flags, float gain, float pitch );
 int audio_play_gain_pitch_pan( audio_t a, int flags, float gain, float pitch, float pan );
 int audio_stop( audio_t a );
 void audio_loop( audio_t a, bool loop );
 bool audio_playing( audio_t a );
 float audio_volume_clip(float gain);
 float audio_volume_stream(float gain);
 float audio_volume_master(float gain);
 int audio_mute(int mute);
 int audio_muted();
 int ui_audio();
enum AUDIO_FLAGS {
    AUDIO_1CH = 0,
    AUDIO_2CH = 1,
    AUDIO_8 = 2,
    AUDIO_16 = 0,
    AUDIO_32 = 4,
    AUDIO_FLOAT = 8,
    AUDIO_8KHZ = 16,
    AUDIO_11KHZ = 32,
    AUDIO_22KHZ = 0,
    AUDIO_32KHZ = 64,
    AUDIO_44KHZ = 128,
    AUDIO_MIXER_GAIN = 0,
    AUDIO_IGNORE_MIXER_GAIN = 256,
    AUDIO_MULTIPLE_INSTANCES = 0,
    AUDIO_SINGLE_INSTANCE = 512,
};
 int audio_queue( const void *samples, int num_samples, int flags );
typedef struct line { vec3 a, b; } line;
typedef struct sphere { vec3 c; float r; } sphere;
typedef struct aabb { vec3 min, max; } aabb;
typedef struct plane { vec3 p, n; } plane;
typedef struct capsule { vec3 a, b; float r; } capsule;
typedef struct ray { vec3 p, d; } ray;
typedef struct triangle { vec3 p0,p1,p2; } triangle;
typedef struct poly { vec3* verts; int cnt; } poly;
typedef union frustum { struct { vec4 l, r, t, b, n, f; }; vec4 pl[6]; float v[24]; } frustum;
typedef struct hit {
    union {
        float depth;
        struct { float t0, t1; };
        struct { int hits; vec3 p0, p1; float distance2; int iterations; };
    };
    union { vec3 p; vec3 contact_point; };
    union { vec3 n; vec3 normal; };
} hit;
 float line_distance2_point(line l, vec3 p);
 vec3 line_closest_point(line l, vec3 p);
 float ray_test_plane(ray r, vec4 p4);
 float ray_test_triangle(ray r, triangle t);
 int ray_test_sphere(float *t0, float *t1, ray r, sphere s);
 int ray_test_aabb(float *t0, float *t1, ray r, aabb a);
 hit* ray_hit_plane(ray r, plane p);
 hit* ray_hit_triangle(ray r, triangle t);
 hit* ray_hit_sphere(ray r, sphere s);
 hit* ray_hit_aabb(ray r, aabb a);
 vec3 sphere_closest_point(sphere s, vec3 p);
 hit* sphere_hit_aabb(sphere s, aabb a);
 hit* sphere_hit_capsule(sphere s, capsule c);
 hit* sphere_hit_sphere(sphere a, sphere b);
 int sphere_test_aabb(sphere s, aabb a);
 int sphere_test_capsule(sphere s, capsule c);
 int sphere_test_sphere(sphere a, sphere b);
 vec3 aabb_closest_point(aabb a, vec3 p);
 float aabb_distance2_point(aabb a, vec3 p);
 int aabb_contains_point(aabb a, vec3 p);
 hit* aabb_hit_aabb(aabb a, aabb b);
 hit* aabb_hit_capsule(aabb a, capsule c);
 hit* aabb_hit_sphere(aabb a, sphere s);
 int aabb_test_aabb(aabb a, aabb b);
 int aabb_test_capsule(aabb a, capsule c);
 int aabb_test_sphere(aabb a, sphere s);
 float capsule_distance2_point(capsule c, vec3 p);
 vec3 capsule_closest_point(capsule c, vec3 p);
 hit* capsule_hit_aabb(capsule c, aabb a);
 hit* capsule_hit_capsule(capsule a, capsule b);
 hit* capsule_hit_sphere(capsule c, sphere s);
 int capsule_test_aabb(capsule c, aabb a);
 int capsule_test_capsule(capsule a, capsule b);
 int capsule_test_sphere(capsule c, sphere s);
 vec4 plane4(vec3 p, vec3 n);
 frustum frustum_build(mat44 projview);
 int frustum_test_sphere(frustum f, sphere s);
 int frustum_test_aabb(frustum f, aabb a);
 poly poly_alloc(int cnt);
 void poly_free(poly *p);
 poly pyramid(vec3 from, vec3 to, float size);
 poly diamond(vec3 from, vec3 to, float size);
 void collide_demo();
enum COOK_FLAGS {
    COOK_SYNC = 0,
    COOK_ASYNC = 1,
    COOK_CANCELABLE = 2,
    COOK_DEBUGLOG = 4,
};
 void cook_config( const char *path_to_cook_ini );
 bool cook_start( const char *path_to_cook_ini, const char *masks, int flags );
 void cook_stop();
 void cook_cancel();
 int cook_jobs();
 int cook_progress();
 bool have_tools();
typedef union json_t { char* s; double f; int64_t i; uintptr_t p; union json_t* arr; } json_t;
 bool json_push(const char *json_content);
 const char* json_key(const char *keypath);
 json_t* json_find(const char *type_keypath);
 json_t json_get(const char *type_keypath);
 int json_count(const char *keypath);
 bool json_pop();
 int xml_push(const char *xml_content);
 const char * xml_string(char *key);
 unsigned xml_count(char *key);
 char* xml_blob(char *key);
 void xml_pop();
 bool data_tests();
 void* dll(const char *filename, const char *symbol);
enum {
    SCRIPT_LUA = 1,
    SCRIPT_DEBUGGER = 2,
};
 void script_init();
 void *script_init_env(unsigned flags);
 bool script_push(void *env);
 void script_run(const char *script);
 void script_runfile(const char *pathfile);
 void script_bind_class(const char *objname, int num_methods, const char **c_names, void **c_functions);
 void script_bind_function(const char *c_name, void *c_function);
 void script_call(const char *lua_function);
 bool script_tests();
 bool script_pop();
 char** file_list( const char *pathmasks );
 bool file_write( const char *file, const void *ptr, int len );
 bool file_append( const char *file, const void *ptr, int len );
 char * file_read(const char *filename);
 char * file_load(const char *filename, int *len);
 uint64_t file_size(const char *pathfile);
 bool file_directory(const char *pathfile);
 char * file_pathabs(const char *pathfile);
 char * file_path(const char *pathfile);
 char * file_name(const char *pathfile);
 char * file_base(const char *pathfile);
 char * file_ext(const char *pathfile);
 char * file_id(const char *pathfile);
 char * file_normalize(const char *pathfile);
 char * file_counter(const char *pathfile);
 uint64_t file_stamp(const char *pathfile);
 uint64_t file_stamp10(const char *pathfile);
 bool file_exist(const char *pathfile);
 bool file_delete(const char *pathfile);
 bool file_copy(const char *src, const char *dst);
 bool file_move(const char *src, const char *dst);
 FILE* file_temp();
 char* file_tempname();
 void* file_md5(const char *file);
 void* file_sha1(const char *file);
 void* file_crc32(const char *file);
 char** file_zip_list(const char *zipfile);
 char* file_zip_extract(const char *zipfile, const char *filename);
 bool file_zip_append(const char *zipfile, const char *filename, int clevel);
 bool file_zip_appendmem(const char *zipfile, const char *entryname, const void *ptr, unsigned len, int clevel);
 void storage_mount(const char* folder);
 void storage_read();
 void storage_flush();
 bool vfs_mount(const char *mount_point);
 char** vfs_list(const char *masks);
 char * vfs_read(const char *pathfile);
 char * vfs_load(const char *pathfile, int *size);
 int vfs_size(const char *pathfile);
 void vfs_reload();
 const char * vfs_resolve(const char *fuzzyname);
 FILE* vfs_handle(const char *pathfile);
 void * cache_insert(const char *key, void *value, int size);
 void * cache_lookup(const char *key, int *size);
typedef struct { map base; struct { pair p; char* key; char* val; } tmp, *ptr; char** tmpval; int (*typed_cmp)(char*, char*); uint64_t (*typed_hash)(char*); } * ini_t;
 ini_t ini(const char *filename);
 ini_t ini_from_mem(const char *data);
 void ini_destroy(ini_t);
 bool ini_write(const char *filename, const char *section, const char *key, const char *value);
enum FONT_FLAGS {
    FONT_512 = 0x0,
    FONT_1024 = 0x1,
    FONT_2048 = 0x2,
    FONT_4096 = 0x4,
    FONT_NO_OVERSAMPLE = 0x0,
    FONT_OVERSAMPLE_X = 0x08,
    FONT_OVERSAMPLE_Y = 0x10,
    FONT_ASCII = 0x800,
    FONT_AR = 0x001000,
    FONT_ZH = 0x002000,
    FONT_EL = 0x004000,
    FONT_EM = 0x008000,
    FONT_EU = 0x010000,
    FONT_HE = 0x020000,
    FONT_JP = 0x040000,
    FONT_KR = 0x080000,
    FONT_RU = 0x100000,
    FONT_TH = 0x200000,
    FONT_VI = 0x400000,
    FONT_CJK = FONT_ZH|FONT_JP|FONT_KR,
};
typedef struct font_metrics_t {
    float ascent;
    float descent;
    float linegap;
    float linedist;
} font_metrics_t;
 void font_face(const char *face_tag, const char *filename_ttf, float font_size, unsigned flags);
 void font_face_from_mem(const char *tag, const void *ttf_buffer, unsigned ttf_len, float font_size, unsigned flags);
 void font_scale(const char *face_tag, int scale_index, float value);
 void font_scales(const char *face_tag, float h1, float h2, float h3, float h4, float h5, float h6);
 void font_color(const char *color_tag, uint32_t color);
 vec2 font_xy();
 void font_goto(float x, float y);
 vec2 font_print(const char *text);
 vec2 font_clip(const char *text, vec4 rect);
 const char* font_wrap(const char *text, float max_width);
 vec2 font_rect(const char *text);
 font_metrics_t font_metrics(const char *text);
 void* font_colorize(const char *text, const char *comma_types, const char *comma_keywords);
 vec2 font_highlight(const char *text, const void *colors);
 void ui_font();
 int input_use( int controller_id );
 float input( int vk );
 vec2 input2( int vk );
 float input_diff( int vk );
 vec2 input_diff2( int vk );
 const char* input_string( int vk );
 float input_frame( int vk, int Nth_frame );
 vec2 input_frame2( int vk, int Nth_frame );
 int input_up( int vk );
 int input_down( int vk );
 int input_held( int vk );
 int input_idle( int vk );
 int input_click( int vk, int ms );
 int input_click2( int vk, int ms );
 int input_repeat( int vk, int ms );
 int input_chord2( int vk1, int vk2 );
 int input_chord3( int vk1, int vk2, int vk3 );
 int input_chord4( int vk1, int vk2, int vk3, int vk4 );
 float input_filter_positive( float v );
 vec2 input_filter_positive2( vec2 v );
 vec2 input_filter_deadzone( vec2 v, float deadzone_treshold );
 vec2 input_filter_deadzone_4way( vec2 v, float deadzone_treshold );
enum TOUCH_BUTTONS {
    TOUCH_0,
    TOUCH_1,
};
 void input_touch_area(unsigned button, vec2 begin_coord_ndc, vec2 end_coord_ndc);
 vec2 input_touch(unsigned button, float sensitivity);
 vec2 input_touch_delta(unsigned button, float sensitivity);
 vec2 input_touch_delta_from_origin(unsigned button, float sensitivity);
 bool input_touch_active();
 void input_mappings(const char *filename);
 char input_keychar(unsigned code);
 int input_enum(const char *sym);
 int input_anykey();
 int input_eval(const char *expression);
 void input_send( int vk );
 char* save_input();
 bool load_input(char* replay);
 int ui_keyboard();
 int ui_mouse();
 int ui_gamepad(int id);
 int ui_gamepads();
enum INPUT_ENUMS {
    KEY_0,KEY_1,KEY_2,KEY_3,KEY_4,KEY_5,KEY_6,KEY_7,KEY_8,KEY_9, KEY_TICK,KEY_BS, KEY_ESC,
    KEY_TAB, KEY_Q,KEY_W,KEY_E,KEY_R,KEY_T,KEY_Y,KEY_U,KEY_I,KEY_O,KEY_P,
    KEY_CAPS, KEY_A,KEY_S,KEY_D,KEY_F,KEY_G,KEY_H,KEY_J,KEY_K,KEY_L, KEY_ENTER,
    KEY_LSHIFT, KEY_Z,KEY_X,KEY_C,KEY_V,KEY_B,KEY_N,KEY_M, KEY_RSHIFT, KEY_UP,
    KEY_LCTRL,KEY_LALT, KEY_SPACE, KEY_RALT,KEY_RCTRL, KEY_LEFT,KEY_DOWN,KEY_RIGHT,
    KEY_INS,KEY_HOME,KEY_PGUP,KEY_DEL,KEY_END,KEY_PGDN,
    KEY_LMETA,KEY_RMETA,KEY_MENU,KEY_PRINT,KEY_PAUSE,KEY_SCROLL,KEY_NUMLOCK,
    KEY_MINUS,KEY_EQUAL,KEY_LSQUARE,KEY_RSQUARE,KEY_SEMICOLON,KEY_QUOTE,KEY_HASH,KEY_BAR,KEY_COMMA,KEY_DOT,KEY_SLASH,
    KEY_F1,KEY_F2,KEY_F3,KEY_F4,KEY_F5,KEY_F6,KEY_F7,KEY_F8,KEY_F9,KEY_F10,KEY_F11,KEY_F12,
    KEY_PAD1,KEY_PAD2,KEY_PAD3,KEY_PAD4,KEY_PAD5,KEY_PAD6,KEY_PAD7,KEY_PAD8,KEY_PAD9,KEY_PAD0,
    KEY_PADADD,KEY_PADSUB,KEY_PADMUL,KEY_PADDIV,KEY_PADDOT,KEY_PADENTER,
    MOUSE_L, MOUSE_M, MOUSE_R,
    GAMEPAD_CONNECTED, GAMEPAD_A, GAMEPAD_B, GAMEPAD_X, GAMEPAD_Y,
    GAMEPAD_UP, GAMEPAD_DOWN, GAMEPAD_LEFT, GAMEPAD_RIGHT, GAMEPAD_MENU, GAMEPAD_START,
    GAMEPAD_LB, GAMEPAD_RB, GAMEPAD_LTHUMB, GAMEPAD_RTHUMB,
    WINDOW_BLUR, WINDOW_FOCUS, WINDOW_CLOSE, WINDOW_MINIMIZE, WINDOW_MAXIMIZE, WINDOW_FULLSCREEN, WINDOW_WINDOWED,
    GAMEPAD_LPAD, GAMEPAD_LPADX = GAMEPAD_LPAD, GAMEPAD_LPADY,
    GAMEPAD_RPAD, GAMEPAD_RPADX = GAMEPAD_RPAD, GAMEPAD_RPADY,
    GAMEPAD_LTRIGGER, GAMEPAD_LT = GAMEPAD_LTRIGGER, GAMEPAD_RTRIGGER, GAMEPAD_RT = GAMEPAD_RTRIGGER, GAMEPAD_BATTERY,
    MOUSE, MOUSE_X = MOUSE, MOUSE_Y, MOUSE_W,
    TOUCH_X1, TOUCH_Y1, TOUCH_X2, TOUCH_Y2,
    WINDOW_RESIZE, WINDOW_RESIZEX = WINDOW_RESIZE, WINDOW_RESIZEY, WINDOW_ORIENTATION, WINDOW_BATTERY,
    GAMEPAD_GUID, GAMEPAD_NAME,
};
enum INPUT_ALIASES {
    KEY_SHIFT = KEY_LSHIFT,
    KEY_ALT = KEY_LALT,
    KEY_CTRL = KEY_LCTRL,
};
 void* xrealloc(void* p, size_t sz);
 size_t xsize(void* p);
 char* xstats(void);
 void* stack(int bytes);
 void* watch( void *ptr, int sz );
 void* forget( void *ptr );
 inline void *(REALLOC_)(void *p, size_t n) { return n ? (xrealloc(p,n)) : xrealloc((p),0); }
 inline void *(CALLOC_)(size_t m, size_t n) { return n *= m, memset(REALLOC_((0),(n)),0,n); }
 inline char *(STRDUP_)(const char *s) { size_t n = strlen(s)+1; return ((char*)memcpy(REALLOC_((0),(n)), s, n)); }
 char* download( const char *url );
 int download_file( FILE *out, const char *url );
 int portname( const char *service_name, unsigned retries );
 bool network_tests();
 int udp_bind(const char *address, const char *port);
 int udp_open(const char *address, const char *port);
 int udp_send(int, const void *buf, int len );
 int udp_sendto(int, const char *ip, const char *port, const void *buf, int len );
 int udp_recv(int, void *buf, int len );
 int udp_peek(int);
 int tcp_open(const char *address, const char *port);
 int tcp_bind(const char *interface_, const char *port, int queue);
 int tcp_peek(int, int(*callback)(int));
 int tcp_send(int, const void* buf, int len);
 int tcp_recv(int, void* buf, int len);
 char* tcp_host(int);
 char* tcp_port(int);
 int tcp_close(int);
 int tcp_debug(int);
 int track_init(char const *host, char const *port);
 int track_destroy(void);
 int track_event(char const *event_id, char const *user_id, char const *json_payload);
 int track_ident(char const *user_id, char const *traits);
 int track_group(char const *user_id, char const *group_id, char const *traits);
typedef struct track_prop {
 char const *key;
 char const *val;
} track_prop;
 int track_event_props(char const *event_id, char const *user_id, const track_prop *props);
enum { NETWORK_BIND = 2, NETWORK_CONNECT = 4, NETWORK_NOFAIL = 8 };
 void network_create(unsigned max_clients, const char *ip, const char *port, unsigned flags);
enum { NETWORK_SEND = 2, NETWORK_RECV = 4 };
enum { NETWORK_UNRELIABLE = 8, NETWORK_UNORDERED = 16 };
 void* network_buffer(void *ptr, unsigned sz, uint64_t flags, int64_t rank);
 char** network_sync(unsigned timeout_ms);
enum {
    NETWORK_EVENT_CONNECT,
    NETWORK_EVENT_DISCONNECT,
    NETWORK_EVENT_RECEIVE,
    NETWORK_EVENT_DISCONNECT_TIMEOUT,
    NETWORK_EVENT_RPC = 10,
    NETWORK_EVENT_RPC_RESP,
};
 int network_event(const char *msg, int *errcode, char **errstr);
enum { NETWORK_RANK = 0 };
enum { NETWORK_PING = 1 };
enum { NETWORK_PORT = 2, NETWORK_IP, NETWORK_LIVE };
enum { NETWORK_SEND_MS = 4 };
enum { NETWORK_BUF_CLEAR_ON_JOIN = 5 };
enum { NETWORK_USERID = 7, NETWORK_COUNT , NETWORK_CAPACITY };
 int64_t network_get(uint64_t key);
 int64_t network_put(uint64_t key, int64_t value);
 void network_rpc(const char *signature, void *function);
 void network_rpc_send_to(int64_t rank, unsigned id, const char *cmdline);
 void network_rpc_send(unsigned id, const char *cmdline);
 bool server_bind(int max_clients, int port);
 char** server_poll(unsigned timeout_ms);
 char** client_poll(unsigned timeout_ms);
 void server_broadcast_bin_flags(const void *ptr, int len, uint64_t flags);
 void server_broadcast_bin(const void *ptr, int len);
 void server_broadcast_flags(const char *msg, uint64_t flags);
 void server_broadcast(const char *msg);
 void server_terminate();
 void server_send(int64_t handle, const char *msg);
 void server_send_bin(int64_t handle, const void *ptr, int len);
 void server_drop(int64_t handle);
 int64_t client_join(const char *ip, int port);
enum COMPRESS_FLAGS {
    COMPRESS_RAW = 0,
    COMPRESS_PPP = (1<<4),
    COMPRESS_ULZ = (2<<4),
    COMPRESS_LZ4 = (3<<4),
    COMPRESS_CRUSH = (4<<4),
    COMPRESS_DEFLATE = (5<<4),
    COMPRESS_LZP1 = (6<<4),
    COMPRESS_LZMA = (7<<4),
    COMPRESS_BALZ = (8<<4),
    COMPRESS_LZW3 = (9<<4),
    COMPRESS_LZSS = (10<<4),
    COMPRESS_BCM = (11<<4),
    COMPRESS_ZLIB = (12<<4),
};
 unsigned zbounds(unsigned inlen, unsigned flags);
 unsigned zencode(void *out, unsigned outlen, const void *in, unsigned inlen, unsigned flags);
 unsigned zexcess(unsigned flags);
 unsigned zdecode(void *out, unsigned outlen, const void *in, unsigned inlen, unsigned flags);
 void *interleave( void *out, const void *list, int list_count, int sizeof_item, unsigned columns );
 unsigned cobs_bounds(unsigned len);
 unsigned cobs_encode(const void *in, unsigned inlen, void *out, unsigned outlen);
 unsigned cobs_decode(const void *in, unsigned inlen, void *out, unsigned outlen);
 unsigned base92_encode(const void *in, unsigned inlen, void* out, unsigned outlen);
 unsigned base92_decode(const void *in, unsigned inlen, void* out, unsigned outlen);
 unsigned base92_bounds(unsigned inlen);
 unsigned netstring_bounds(unsigned inlen);
 unsigned netstring_encode(const char *in, unsigned inlen, char *out, unsigned outlen);
 unsigned netstring_decode(const char *in, unsigned inlen, char *out, unsigned outlen);
 void delta8_encode(void *buffer, unsigned count);
 void delta8_decode(void *buffer, unsigned count);
 void delta16_encode(void *buffer, unsigned count);
 void delta16_decode(void *buffer, unsigned count);
 void delta32_encode(void *buffer, unsigned count);
 void delta32_decode(void *buffer, unsigned count);
 void delta64_encode(void *buffer, unsigned count);
 void delta64_decode(void *buffer, unsigned count);
 uint64_t zig64( int64_t value );
 int64_t zag64( uint64_t value );
 uint32_t enczig32u( int32_t n);
 uint64_t enczig64u( int64_t n);
 int32_t deczig32i(uint32_t n);
 int64_t deczig64i(uint64_t n);
 void *arc4( void *buffer, unsigned buflen, const void *pass, unsigned passlen );
 uint64_t crc64(uint64_t h, const void *ptr, uint64_t len);
 void entropy( void *buf, unsigned n );
 int semver( int major, int minor, int patch );
 int semvercmp( int v1, int v2 );
typedef struct byte2 { uint8_t x,y; } byte2;
typedef struct byte3 { uint8_t x,y,z; } byte3;
typedef struct byte4 { uint8_t x,y,z,w; } byte4;
typedef struct int2 { int x,y; } int2;
typedef struct int3 { int x,y,z; } int3;
typedef struct int4 { int x,y,z,w; } int4;
typedef struct uint2 { unsigned int x,y; } uint2;
typedef struct uint3 { unsigned int x,y,z; } uint3;
typedef struct uint4 { unsigned int x,y,z,w; } uint4;
typedef struct float2 { float x,y; } float2;
typedef struct float3 { float x,y,z; } float3;
typedef struct float4 { float x,y,z,w; } float4;
typedef struct double2 { double x,y; } double2;
typedef struct double3 { double x,y,z; } double3;
typedef struct double4 { double x,y,z,w; } double4;
 char *cc4str(unsigned cc);
 char *cc8str(uint64_t cc);
enum {
    cc__1 = '1', cc__2, cc__3, cc__4, cc__5, cc__6,cc__7, cc__8, cc__9, cc__0, cc___, cc__ = ' ',
    cc__A = 'A', cc__B, cc__C, cc__D, cc__E, cc__F,cc__G, cc__H, cc__I, cc__J, cc__K,cc__L, cc__M, cc__N, cc__O, cc__P,cc__Q, cc__R, cc__S, cc__T, cc__U,cc__V, cc__W, cc__X, cc__Y, cc__Z,
    cc__a = 'a', cc__b, cc__c, cc__d, cc__e, cc__f,cc__g, cc__h, cc__i, cc__j, cc__k,cc__l, cc__m, cc__n, cc__o, cc__p,cc__q, cc__r, cc__s, cc__t, cc__u,cc__v, cc__w, cc__x, cc__y, cc__z,
};
 char* ftoa1(float v);
 char* ftoa2(vec2 v);
 char* ftoa3(vec3 v);
 char* ftoa4(vec4 v);
 float atof1(const char *s);
 vec2 atof2(const char *s);
 vec3 atof3(const char *s);
 vec4 atof4(const char *s);
 char* itoa1(int v);
 char* itoa2(vec2i v);
 char* itoa3(vec3i v);
 int atoi1(const char *s);
 vec2i atoi2(const char *s);
 vec3i atoi3(const char *s);
 int is_big();
 int is_little();
 uint16_t swap16( uint16_t x );
 uint32_t swap32( uint32_t x );
 uint64_t swap64( uint64_t x );
 float swap32f(float n);
 double swap64f(double n);
 void swapf(float *a, float *b);
 void swapf2(vec2 *a, vec2 *b);
 void swapf3(vec3 *a, vec3 *b);
 void swapf4(vec4 *a, vec4 *b);
 uint16_t lil16(uint16_t n);
 uint32_t lil32(uint32_t n);
 uint64_t lil64(uint64_t n);
 float lil32f(float n);
 double lil64f(double n);
 uint16_t big16(uint16_t n);
 uint32_t big32(uint32_t n);
 uint64_t big64(uint64_t n);
 float big32f(float n);
 double big64f(double n);
 uint16_t* lil16p(void *p, int sz);
 uint32_t* lil32p(void *p, int sz);
 uint64_t* lil64p(void *p, int sz);
 float * lil32pf(void *p, int sz);
 double * lil64pf(void *p, int sz);
 uint16_t* big16p(void *p, int sz);
 uint32_t* big32p(void *p, int sz);
 uint64_t* big64p(void *p, int sz);
 float * big32pf(void *p, int sz);
 double * big64pf(void *p, int sz);
typedef uint16_t half;
 float half_to_float(half value);
 half float_to_half(float value);
 void pack16i(uint8_t *buf, uint16_t i, int swap);
 void pack32i(uint8_t *buf, uint32_t i, int swap);
 void pack64i(uint8_t *buf, uint64_t i, int swap);
 int16_t unpack16i(const uint8_t *buf, int swap);
 int32_t unpack32i(const uint8_t *buf, int swap);
 int64_t unpack64i(const uint8_t *buf, int swap);
 uint64_t pack754(long double f, unsigned bits, unsigned expbits);
 long double unpack754(uint64_t i, unsigned bits, unsigned expbits);
 uint64_t pack64uv( uint8_t *buffer, uint64_t value );
 uint64_t unpack64uv( const uint8_t *buffer, uint64_t *value );
 uint64_t pack64iv( uint8_t *buffer, int64_t value_ );
 uint64_t unpack64iv( const uint8_t *buffer, int64_t *value );
 int msgpack(const char *fmt, ... );
 int msgunpack(const char *fmt, ... );
 int msgpack_new(uint8_t *w, size_t l);
 int msgpack_nil();
 int msgpack_chr(bool n);
 int msgpack_uns(uint64_t n);
 int msgpack_int(int64_t n);
 int msgpack_str(const char *s);
 int msgpack_bin(const char *s, size_t n);
 int msgpack_flt(double g);
 int msgpack_ext(uint8_t key, void *val, size_t n);
 int msgpack_arr(uint32_t n);
 int msgpack_map(uint32_t n);
 int msgpack_eof();
 int msgpack_err();
 bool msgunpack_new( const void *opaque_or_FILE, size_t bytes );
 bool msgunpack_nil();
 bool msgunpack_chr(bool *chr);
 bool msgunpack_uns(uint64_t *uns);
 bool msgunpack_int(int64_t *sig);
 bool msgunpack_str(char **str);
 bool msgunpack_bin(void **bin, uint64_t *len);
 bool msgunpack_flt(float *flt);
 bool msgunpack_dbl(double *dbl);
 bool msgunpack_ext(uint8_t *key, void **val, uint64_t *len);
 bool msgunpack_arr(uint64_t *len);
 bool msgunpack_map(uint64_t *len);
 bool msgunpack_eof();
 bool msgunpack_err();
 int savef(FILE *file, const char *format, ...);
 int saveb(unsigned char *buf, const char *format, ...);
 int loadf(FILE *file, const char *format, ...);
 int loadb(const unsigned char *buf, const char *format, ...);
 int profiler_enable(bool on);
struct profile_t { double stat; int32_t cost, avg; };
typedef struct { map base; struct { pair p; char * key; struct profile_t val; } tmp, *ptr; struct profile_t* tmpval; int (*typed_cmp)(char *, char *); uint64_t (*typed_hash)(char *); } * profiler_t;
extern  profiler_t profiler;
extern  int profiler_enabled;
typedef struct reflect_t {
    unsigned id, objtype;
    union {
    unsigned sz;
    unsigned member_offset;
    unsigned enum_value;
    };
    const char *name;
    const char *info;
    void *addr;
    unsigned parent;
    const char *type;
    unsigned bytes;
} reflect_t;
 unsigned enum_find(const char *E);
 void * function_find(const char *F);
 reflect_t member_find(const char *T, const char *M);
 void * member_findptr(void *obj, const char *T, const char *M);
 reflect_t** members_find(const char *T);
 void type_inscribe(const char *TY,unsigned TYsz,const char *infos);
 void enum_inscribe(const char *E,unsigned Eval,const char *infos);
 void struct_inscribe(const char *T,unsigned Tsz,unsigned OBJTYPEid, const char *infos);
 void member_inscribe(const char *T, const char *M,unsigned Msz, const char *infos, const char *type, unsigned bytes);
 void function_inscribe(const char *F,void *func,const char *infos);
 const char* symbol_naked(const char *s);
 int ui_reflect(const char *mask);
typedef unsigned handle;
typedef struct renderstate_t {
    float clear_color[4];
    bool color_mask[4];
    double clear_depth;
    bool depth_test_enabled;
    bool depth_write_enabled;
    unsigned depth_func;
    bool polygon_offset_enabled;
    float polygon_offset;
    float polygon_offset_factor;
    bool blend_enabled;
    unsigned blend_func;
    unsigned blend_src;
    unsigned blend_dst;
    bool cull_face_enabled;
    unsigned cull_face_mode;
    bool stencil_test_enabled;
    unsigned stencil_func;
    unsigned stencil_op_fail, stencil_op_zfail, stencil_op_zpass;
    int stencil_ref;
    unsigned stencil_read_mask;
    unsigned stencil_write_mask;
    unsigned front_face;
    bool line_smooth_enabled;
    float line_width;
    bool point_size_enabled;
    float point_size;
    unsigned polygon_mode_face;
    unsigned polygon_mode_draw;
    bool scissor_test_enabled;
    bool seamless_cubemap;
    bool depth_clamp_enabled;
} renderstate_t;
 renderstate_t renderstate();
 bool renderstate_compare(const renderstate_t *stateA, const renderstate_t *stateB);
 void renderstate_apply(const renderstate_t *state);
 unsigned rgba( uint8_t r, uint8_t g, uint8_t b, uint8_t a );
 unsigned bgra( uint8_t b, uint8_t g, uint8_t r, uint8_t a );
 unsigned rgbaf( float r, float g, float b, float a );
 unsigned bgraf( float b, float g, float r, float a );
 unsigned alpha( unsigned rgba );
 unsigned atorgba(const char *s);
 char * rgbatoa(unsigned rgba);
enum IMAGE_FLAGS {
    IMAGE_R = 0x01000,
    IMAGE_RG = 0x02000,
    IMAGE_RGB = 0x04000,
    IMAGE_RGBA = 0x08000,
    IMAGE_FLIP = 0x10000,
    IMAGE_FLOAT = 0x20000,
};
typedef struct image_t {
    union { unsigned x, w; };
    union { unsigned y, h; };
    union { unsigned n, comps; };
    union { void *pixels; uint8_t *pixels8; uint16_t *pixels16; uint32_t *pixels32; float *pixelsf; };
} image_t;
 image_t image(const char *pathfile, int flags);
 image_t image_from_mem(const void *ptr, int len, int flags);
 void image_destroy(image_t *img);
enum TEXTURE_FLAGS {
    TEXTURE_BC1 = 8,
    TEXTURE_BC2 = 16,
    TEXTURE_BC3 = 32,
    TEXTURE_NEAREST = 0,
    TEXTURE_LINEAR = 64,
    TEXTURE_MIPMAPS = 128,
    TEXTURE_ANISOTROPY = 1 << 30,
    TEXTURE_CLAMP = 0,
    TEXTURE_BORDER = 0x100,
    TEXTURE_REPEAT = 0x200,
    TEXTURE_BYTE = 0,
    TEXTURE_FLOAT = IMAGE_FLOAT,
    TEXTURE_COLOR = 0,
    TEXTURE_DEPTH = 0x800,
    TEXTURE_R = IMAGE_R,
    TEXTURE_RG = IMAGE_RG,
    TEXTURE_RGB = IMAGE_RGB,
    TEXTURE_RGBA = IMAGE_RGBA,
    TEXTURE_FLIP = IMAGE_FLIP,
    TEXTURE_SRGB = 1 << 24,
    TEXTURE_BGR = 1 << 25,
    TEXTURE_BGRA = TEXTURE_BGR,
    TEXTURE_ARRAY = 1 << 26,
};
typedef struct texture_t {
    union { unsigned x, w; };
    union { unsigned y, h; };
    union { unsigned z, d; };
    union { unsigned n, bpp; };
    handle id;
    unsigned texel_type;
    unsigned flags;
    char* filename;
    bool transparent;
    unsigned fbo;
    union { unsigned userdata, delay; };
} texture_t;
 texture_t texture_compressed(const char *filename, unsigned flags);
 texture_t texture_compressed_from_mem(const void *data, int len, unsigned flags);
 texture_t texture(const char* filename, int flags);
 texture_t texture_from_mem(const void* ptr, int len, int flags);
 texture_t texture_create(unsigned w, unsigned h, unsigned n, const void *pixels, int flags);
 texture_t texture_checker();
 void texture_destroy(texture_t *t);
 int texture_unit();
 unsigned texture_update(texture_t *t, unsigned w, unsigned h, unsigned n, const void *pixels, int flags);
 bool texture_rec_begin(texture_t *t, unsigned w, unsigned h);
 void texture_rec_end(texture_t *t);
 texture_t brdf_lut();
typedef struct colormap_t {
    vec4 color;
    texture_t *texture;
} colormap_t;
 bool colormap( colormap_t *cm, const char *texture_name, bool load_as_srgb );
 unsigned query_test_point(mat44 proj, mat44 view, vec3 pos, float size);
 void fullscreen_quad_rgb( texture_t texture_rgb );
 void fullscreen_quad_rgb_flipped( texture_t texture );
 void fullscreen_quad_ycbcr( texture_t texture_YCbCr[3] );
 void fullscreen_quad_ycbcr_flipped( texture_t texture_YCbCr[3] );
typedef struct cubemap_t {
    unsigned id;
    vec3 sh[9];
    int framebuffers[6];
    int textures[6];
    int depth_buffers[6];
    unsigned width, height;
    float *pixels;
    int step;
    vec3 pos;
} cubemap_t;
 cubemap_t cubemap( const image_t image, int flags );
 cubemap_t cubemap6( const image_t images[6], int flags );
 void cubemap_destroy(cubemap_t *c);
 cubemap_t* cubemap_get_active();
 void cubemap_bake_begin(cubemap_t *c, vec3 pos, unsigned width, unsigned height);
 bool cubemap_bake_step(cubemap_t *c, mat44 proj , mat44 view );
 void cubemap_bake_end(cubemap_t *c, int step , float sky_intensity );
 void cubemap_sh_reset(cubemap_t *c);
 void cubemap_sh_shader(cubemap_t *c);
 void cubemap_sh_add_light(cubemap_t *c, vec3 light, vec3 dir, float strength);
 void cubemap_sh_blend(vec3 pos, float max_dist, unsigned count, cubemap_t *probes);
 unsigned fbo( unsigned texture_color, unsigned texture_depth, int wr_flags );
 void fbo_bind(unsigned id);
 void fbo_unbind();
 void fbo_destroy(unsigned id);
enum {
    MAX_LIGHTS = 16,
};
enum LIGHT_TYPE {
    LIGHT_DIRECTIONAL,
    LIGHT_POINT,
    LIGHT_SPOT,
};
enum SHADOW_TECHNIQUE {
    SHADOW_VSM,
    SHADOW_CSM,
};
typedef struct light_t {
    unsigned type;
    vec3 diffuse, specular, ambient;
    vec3 pos, dir;
    struct {
        float constant, linear, quadratic;
    } falloff;
    float radius;
    float specularPower;
    float innerCone, outerCone;
    bool cast_shadows;
    unsigned shadow_technique;
    float shadow_distance;
    float shadow_near_clip;
    mat44 shadow_matrix[4];
    float min_variance;
    float variance_transition;
    float shadow_bias;
    float normal_bias;
    float shadow_softness;
    float penumbra_size;
    bool cached;
    bool processed_shadows;
} light_t;
 light_t light();
 void light_type(light_t* l, char type);
 void light_diffuse(light_t* l, vec3 color);
 void light_specular(light_t* l, vec3 color);
 void light_ambient(light_t* l, vec3 color);
 void light_teleport(light_t* l, vec3 pos);
 void light_dir(light_t* l, vec3 dir);
 void light_power(light_t* l, float power);
 void light_radius(light_t* l, float radius);
 void light_falloff(light_t* l, float constant, float linear, float quadratic);
 void light_cone(light_t* l, float innerCone, float outerCone);
 void light_update(unsigned num_lights, light_t *lv);
 void ui_light(light_t *l);
 void ui_lights(unsigned num_lights, light_t *lights);
typedef struct shadowmap_t {
    mat44 V;
    mat44 PV;
    int vsm_texture_width;
    int csm_texture_width;
    int step;
    int light_step;
    int cascade_index;
    unsigned shadow_technique;
    float cascade_splits[4];
    frustum shadow_frustum;
    bool skip_render;
    int lights_pushed;
    handle fbo;
    uint64_t vram_usage;
    uint64_t vram_usage_total;
    uint64_t vram_usage_vsm;
    uint64_t vram_usage_csm;
    handle depth_texture;
    handle depth_texture_2d;
    int filter_size, window_size;
    handle offsets_texture;
    struct {
        int gen;
        unsigned shadow_technique;
        handle texture;
        handle texture_2d[4];
        float cascade_distances[4];
    } maps[MAX_LIGHTS];
    handle saved_fb;
    handle saved_pass;
    int saved_vp[4];
    int gen;
    int old_filter_size;
    int old_window_size;
} shadowmap_t;
 shadowmap_t shadowmap(int vsm_texture_width, int csm_texture_width);
 void shadowmap_offsets_build(shadowmap_t *s, int filter_size, int window_size);
 void shadowmap_destroy(shadowmap_t *s);
 void shadowmap_begin(shadowmap_t *s);
 bool shadowmap_step(shadowmap_t *s);
 void shadowmap_light(shadowmap_t *s, light_t *l, mat44 cam_proj, mat44 cam_view);
 void shadowmap_end(shadowmap_t *s);
 void ui_shadowmap(shadowmap_t *s);
 unsigned shader(const char *vs, const char *fs, const char *attribs, const char *fragcolor, const char *defines);
 unsigned shader_geom(const char *gs, const char *vs, const char *fs, const char *attribs, const char *fragcolor, const char *defines);
 unsigned shader_bind(unsigned program);
 int shader_uniform(const char *name);
 void shader_bool(const char *uniform, bool i );
 void shader_int(const char *uniform, int i);
 void shader_uint(const char *uniform, unsigned i );
 void shader_float(const char *uniform, float f);
 void shader_vec2(const char *uniform, vec2 v);
 void shader_vec3(const char *uniform, vec3 v);
 void shader_vec3v(const char *uniform, int count, vec3 *v);
 void shader_vec4(const char *uniform, vec4 v);
 void shader_mat44(const char *uniform, mat44 m);
 void shader_texture(const char *sampler, texture_t texture);
 void shader_texture_unit(const char *sampler, unsigned texture, unsigned unit);
 void shader_colormap(const char *name, colormap_t cm);
 unsigned shader_get_active();
 void shader_destroy(unsigned shader);
 unsigned shader_properties(unsigned shader);
 char** shader_property(unsigned shader, unsigned property_no);
 void shader_apply_param(unsigned shader, unsigned param_no);
 void shader_apply_params(unsigned shader, const char *parameter_mask);
 int ui_shader(unsigned shader);
 int ui_shaders();
enum BUFFER_MODE {
    BUFFER_READ,
    BUFFER_WRITE,
    BUFFER_READ_WRITE
};
 unsigned compute(const char *cs);
 void compute_dispatch(unsigned wx, unsigned wy, unsigned wz);
 void shader_image(texture_t t, unsigned unit, unsigned level, int layer, unsigned access);
 void shader_image_unit(unsigned texture, unsigned unit, unsigned level, int layer, unsigned texel_type, unsigned access);
 void write_barrier();
 void write_barrier_image();
enum SSBO_USAGE {
    STATIC_DRAW,
    STATIC_READ,
    STATIC_COPY,
    DYNAMIC_DRAW,
    DYNAMIC_READ,
    DYNAMIC_COPY,
    STREAM_DRAW,
    STREAM_READ,
    STREAM_COPY
};
enum SSBO_ACCESS {
    SSBO_READ = BUFFER_READ,
    SSBO_WRITE = BUFFER_WRITE,
    SSBO_READ_WRITE = BUFFER_READ_WRITE
};
 unsigned ssbo_create(const void *data, int len, unsigned usage);
 void ssbo_destroy(unsigned ssbo);
 void ssbo_update(int offset, int len, const void *data);
 void ssbo_bind(unsigned ssbo, unsigned unit);
 void *ssbo_map(unsigned access);
 void ssbo_unmap();
 void ssbo_unbind();
enum MESH_FLAGS {
    MESH_STATIC = 0,
    MESH_STREAM = 1,
    MESH_TRIANGLE_STRIP = 2,
};
typedef struct mesh_t {
    handle vao, vbo, ibo;
    unsigned vertex_count;
    unsigned index_count;
    unsigned flags;
    int* lod_collapse_map;
    union {
    unsigned* in_index;
    vec3i* in_index3;
    };
    union {
    unsigned* out_index;
    vec3i* out_index3;
    };
    union {
    float* in_vertex;
    vec3* in_vertex3;
    };
    union {
    float* out_vertex;
    vec3* out_vertex3;
    };
} mesh_t;
 mesh_t mesh();
 void mesh_update(mesh_t *m, const char *format, int vertex_stride,int vertex_count,const void *interleaved_vertex_data, int index_count,const void *index_data, int flags);
 void mesh_render(mesh_t *m);
 void mesh_render_prim(mesh_t *sm, unsigned prim);
 void mesh_destroy(mesh_t *m);
 aabb mesh_bounds(mesh_t *m);
enum SKYBOX_FLAGS {
	SKYBOX_RAYLEIGH,
	SKYBOX_CUBEMAP,
	SKYBOX_PBR,
};
typedef struct skybox_t {
    handle program, rayleigh_program;
    mesh_t geometry;
    cubemap_t cubemap;
    int flags;
    bool rayleigh_immediate;
    texture_t sky, refl, env;
} skybox_t;
 skybox_t skybox(const char *panorama_or_cubemap_folder, int flags);
 skybox_t skybox_pbr(const char *sky_map, const char *refl_map, const char *env_map);
 int skybox_render(skybox_t *sky, mat44 proj, mat44 view);
 void skybox_destroy(skybox_t *sky);
 void skybox_mie_calc_sh(skybox_t *sky, float sky_intensity);
 void skybox_sh_reset(skybox_t *sky);
 void skybox_sh_shader(skybox_t *sky);
 void skybox_sh_add_light(skybox_t *sky, vec3 light, vec3 dir, float strength);
 int skybox_push_state(skybox_t *sky, mat44 proj, mat44 view);
 int skybox_pop_state();
enum MATERIAL_ENUMS {
	MATERIAL_CHANNEL_DIFFUSE,
	MATERIAL_CHANNEL_NORMALS,
	MATERIAL_CHANNEL_SPECULAR,
	MATERIAL_CHANNEL_ALBEDO,
	MATERIAL_CHANNEL_ROUGHNESS,
	MATERIAL_CHANNEL_METALLIC,
	MATERIAL_CHANNEL_AO,
	MATERIAL_CHANNEL_AMBIENT,
	MATERIAL_CHANNEL_EMISSIVE,
    MAX_CHANNELS_PER_MATERIAL
};
typedef struct material_layer_t {
    char texname[32];
    float value;
    colormap_t map;
} material_layer_t;
typedef struct material_t {
    char *name;
    material_layer_t layer[MAX_CHANNELS_PER_MATERIAL];
} material_t;
enum {
    SHADERTOY_FLIP_Y = 2,
    SHADERTOY_IGNORE_FBO = 4,
    SHADERTOY_IGNORE_MOUSE = 8,
};
typedef struct shadertoy_t {
    handle vao, program;
    int uniforms[32];
    int texture_channels[4];
    int frame;
    uint64_t t;
    texture_t tx;
    vec2i dims;
    int flags;
    vec4 mouse;
} shadertoy_t;
 shadertoy_t shadertoy( const char *shaderfile, unsigned flags );
 shadertoy_t* shadertoy_render( shadertoy_t *s, float delta );
enum ANIM_FLAGS {
    ANIM_LOOP = 1,
    ANIM_DONT_RESET_AFTER_USE = 2,
};
typedef struct anim_t {
    int from;
    int to;
    float blendtime;
    unsigned flags;
    float curframe;
    unsigned easing;
    float alpha;
    float timer;
    bool active;
    vec3 pose;
    char* name;
} anim_t;
 anim_t clip(float minframe, float maxframe, float blendtime, unsigned flags);
 anim_t loop(float minframe, float maxframe, float blendtime, unsigned flags);
 anim_t* animlist(const char *filename);
enum MODEL_FLAGS {
    MODEL_NO_ANIMATIONS = 1,
    MODEL_NO_MESHES = 2,
    MODEL_NO_TEXTURES = 4,
    MODEL_NO_FILTERING = 8,
    MODEL_MATCAPS = 16,
    MODEL_RIMLIGHT = 32,
    MODEL_PBR = 64,
    MODEL_TRANSPARENT = 128,
};
enum SHADING_MODE {
    SHADING_NONE,
    SHADING_PHONG,
    SHADING_VERTEXLIT,
    SHADING_PBR,
};
enum FOG_MODE {
    FOG_NONE,
    FOG_LINEAR,
    FOG_EXP,
    FOG_EXP2,
    FOG_DEPTH,
};
enum RENDER_PASS {
    RENDER_PASS_OPAQUE,
    RENDER_PASS_TRANSPARENT,
    RENDER_PASS_OVERRIDES_BEGIN,
    RENDER_PASS_SHADOW_BEGIN,
    RENDER_PASS_SHADOW_CSM,
    RENDER_PASS_SHADOW_VSM,
    RENDER_PASS_SHADOW_END,
    RENDER_PASS_LIGHTMAP,
    RENDER_PASS_CUSTOM,
    RENDER_PASS_OVERRIDES_END,
    NUM_RENDER_PASSES
};
enum MODEL_UNIFORMS {
    MODEL_UNIFORM_MV,
    MODEL_UNIFORM_MVP,
    MODEL_UNIFORM_VP,
    MODEL_UNIFORM_CAM_POS,
    MODEL_UNIFORM_CAM_DIR,
    MODEL_UNIFORM_BILLBOARD,
    MODEL_UNIFORM_TEXLIT,
    MODEL_UNIFORM_MODEL,
    MODEL_UNIFORM_VIEW,
    MODEL_UNIFORM_INV_VIEW,
    MODEL_UNIFORM_PROJ,
    MODEL_UNIFORM_SKINNED,
    MODEL_UNIFORM_VS_BONE_MATRIX,
    MODEL_UNIFORM_U_MATCAPS,
    MODEL_UNIFORM_RESOLUTION,
    MODEL_UNIFORM_HAS_TEX_SKYSPHERE,
    MODEL_UNIFORM_HAS_TEX_SKYENV,
    MODEL_UNIFORM_TEX_SKYSPHERE,
    MODEL_UNIFORM_SKYSPHERE_MIP_COUNT,
    MODEL_UNIFORM_TEX_SKYENV,
    MODEL_UNIFORM_TEX_BRDF_LUT,
    MODEL_UNIFORM_FRAME_COUNT,
    NUM_MODEL_UNIFORMS
};
typedef struct model_t {
    struct iqm_t *iqm;
    int shading;
    unsigned num_textures;
    handle *textures;
    char **texture_names;
    material_t* materials;
    int uniforms[NUM_MODEL_UNIFORMS];
    texture_t sky_refl, sky_env;
    texture_t lightmap;
    float *lmdata;
    unsigned num_meshes;
    unsigned num_triangles;
    unsigned num_joints;
    unsigned num_anims;
    unsigned num_frames;
    handle program;
    handle shadow_program;
    shadowmap_t *shadow_map;
    bool shadow_receiver;
    float curframe;
    mat44 pivot;
    int stride;
    void *verts;
    int num_verts;
    void *tris;
    vec3 *meshcenters;
    aabb *meshbounds;
    float *meshradii;
    bool *mesh_visible;
    int num_tris;
    handle vao, ibo, vbo, vao_instanced;
    int* lod_collapse_map;
    void *lod_verts;
    int lod_num_verts;
    void *lod_tris;
    int lod_num_tris;
    unsigned flags;
    unsigned billboard;
    float *instanced_matrices;
    unsigned num_instances;
    int stored_flags;
    renderstate_t rs[NUM_RENDER_PASSES];
    bool frustum_enabled;
    frustum frustum_state;
} model_t;
enum BILLBOARD_MODE {
    BILLBOARD_X = 0x1,
    BILLBOARD_Y = 0x2,
    BILLBOARD_Z = 0x4,
    BILLBOARD_CYLINDRICAL = BILLBOARD_X|BILLBOARD_Z,
    BILLBOARD_SPHERICAL = BILLBOARD_X|BILLBOARD_Y|BILLBOARD_Z
};
 model_t model(const char *filename, int flags);
 model_t model_from_mem(const void *mem, int sz, int flags);
 float model_animate(model_t, float curframe);
 float model_animate_clip(model_t, float curframe, int minframe, int maxframe, bool loop);
 float model_animate_blends(model_t m, anim_t *primary, anim_t *secondary, float delta);
 aabb model_aabb(model_t, mat44 transform);
 void model_lod(model_t*, float lo_detail, float hi_detail, float morph);
 void model_shading(model_t*, int shading);
 void model_shading_custom(model_t*, int shading, const char *vs, const char *fs, const char *defines);
 void model_skybox(model_t*, skybox_t sky, bool load_sh);
 void model_shadow(model_t*, shadowmap_t *sm);
 void model_fog(model_t*, unsigned mode, vec3 color, float start, float end, float density);
 void model_render(model_t, mat44 proj, mat44 view, mat44 model, int shader);
 void model_render_skeleton(model_t, mat44 model);
 void model_render_instanced(model_t, mat44 proj, mat44 view, mat44 *models, int shader, unsigned count);
 void model_render_instanced_pass(model_t m, mat44 proj, mat44 view, mat44* models, int shader, unsigned count, int pass);
 void model_render_pass(model_t m, mat44 proj, mat44 view, mat44 model, int shader, int pass);
 void model_set_texture(model_t*, texture_t t);
 bool model_has_transparency_mesh(model_t m, int mesh);
 bool model_has_transparency(model_t m);
 void model_set_frustum(model_t *m, frustum f);
 void model_clear_frustum(model_t *m);
 bool model_get_bone_pose(model_t m, unsigned joint, mat34 *out);
 bool model_get_bone_position(model_t m, unsigned joint, mat44 M, vec3 *out);
 void model_destroy(model_t);
 unsigned model_getpass();
 unsigned model_setpass(unsigned pass);
 vec3 pose(bool forward, float curframe, int minframe, int maxframe, bool loop, float *opt_retframe);
typedef struct anims_t {
    int inuse;
    float speed;
    anim_t* anims;
} anims_t;
 anims_t animations(const char *pathfile, int flags);
typedef struct lightmap_t {
    struct lm_context *ctx;
    bool ready;
    int w, h;
    int atlas_w, atlas_h;
    texture_t atlas;
    model_t** models;
    unsigned shader;
} lightmap_t;
 lightmap_t lightmap(int hmsize , float near, float far, vec3 color , int passes , float threshold , float distmod );
 void lightmap_setup(lightmap_t *lm, int w, int h);
 void lightmap_bake(lightmap_t *lm, int bounces, void (*drawscene)(lightmap_t *lm, model_t *m, float *view, float *proj, void *userdata), void (*progressupdate)(float progress), void *userdata);
 void lightmap_destroy(lightmap_t *lm);
 void viewport_color(unsigned color);
 void viewport_clear(bool color, bool depth);
 void viewport_clip(vec2 from, vec2 to);
 int fx_load(const char *file);
 int fx_load_from_mem(const char *nameid, const char *content);
 void fx_begin();
 void fx_begin_res(int w, int h);
 void fx_end();
 void fx_enable(int pass, int enabled);
 int fx_enabled(int pass);
 void fx_enable_all(int enabled);
 char * fx_name(int pass);
 int fx_find(const char *name);
 void fx_setparam(int pass, const char *name, float value);
 void fx_order(int pass, unsigned priority);
 unsigned fx_program(int pass);
 int ui_fx(int pass);
 int ui_fxs();
 void* screenshot(int components);
 void* screenshot_async(int components);
 void ddraw_line_width(float width);
 void ddraw_line_width_push(float scale);
 void ddraw_line_width_pop();
 void ddraw_color(unsigned rgb);
 void ddraw_color_push(unsigned rgb);
 void ddraw_color_pop();
 void ddraw_ontop(int enabled);
 void ddraw_ontop_push(int enabled);
 void ddraw_ontop_pop();
 void ddraw_push_2d();
 void ddraw_pop_2d();
 void ddraw_aabb(vec3 minbb, vec3 maxbb);
 void ddraw_aabb_corners(vec3 minbb, vec3 maxbb);
 void ddraw_arrow(vec3 begin, vec3 end);
 void ddraw_axis(float units);
 void ddraw_boid(vec3 pos, vec3 dir);
 void ddraw_bone(vec3 center, vec3 end);
 void ddraw_bounds(const vec3 points[8]);
 void ddraw_box(vec3 center, vec3 extents);
 void ddraw_capsule(vec3 from, vec3 to, float radius);
 void ddraw_circle(vec3 pos, vec3 n, float radius);
 void ddraw_ring(vec3 pos, vec3 n, float radius);
 void ddraw_cone(vec3 center, vec3 top, float radius);
 void ddraw_cube(vec3 center, float radius);
 void ddraw_cube33(vec3 center, vec3 radius, mat33 M);
 void ddraw_diamond(vec3 from, vec3 to, float size);
 void ddraw_frustum(float projview[16]);
 void ddraw_ground(float scale);
 void ddraw_grid(float scale);
 void ddraw_hexagon(vec3 pos, float radius);
 void ddraw_line(vec3 from, vec3 to);
 void ddraw_line_dashed(vec3 from, vec3 to);
 void ddraw_line_thin(vec3 from, vec3 to);
 void ddraw_normal(vec3 pos, vec3 n);
 void ddraw_pentagon(vec3 pos, float radius);
 void ddraw_plane(vec3 p, vec3 n, float scale);
 void ddraw_point(vec3 from);
 void ddraw_position(vec3 pos, float radius);
 void ddraw_position_dir(vec3 pos, vec3 dir, float radius);
 void ddraw_pyramid(vec3 center, float height, int segments);
 void ddraw_cylinder(vec3 center, float height, int segments);
 void ddraw_sphere(vec3 pos, float radius);
 void ddraw_square(vec3 pos, float radius);
 void ddraw_text(vec3 pos, float scale, const char *text);
 void ddraw_text2d(vec2 pos, const char *text);
 void ddraw_triangle(vec3 p1, vec3 p2, vec3 p3);
 void ddraw_prism(vec3 center, float radius, float height, vec3 normal, int segments);
 void ddraw_demo();
 void ddraw_flush();
 void ddraw_flush_projview(mat44 proj, mat44 view);
 int gizmo(vec3 *pos, vec3 *rot, vec3 *sca);
 bool gizmo_active();
 bool gizmo_hover();
typedef struct camera_t {
    mat44 view, proj;
    vec3 position, updir, lookdir, rightdir;
    float yaw, pitch, roll;
    float speed, fov;
    float near_clip, far_clip;
    float frustum_fov_multiplier;
    float move_friction, move_damping;
    float look_friction, look_damping;
    vec3 last_look; vec3 last_move;
    bool damping;
    bool orthographic;
    float distance;
} camera_t;
 camera_t camera();
 void camera_teleport(camera_t *cam, vec3 pos);
 void camera_moveby(camera_t *cam, vec3 inc);
 void camera_fov(camera_t *cam, float fov);
 void camera_fps(camera_t *cam, float yaw, float pitch);
 void camera_fps2(camera_t *cam, float yaw, float pitch, float roll);
 void camera_orbit(camera_t *cam, float yaw, float pitch, float inc_distance);
 void camera_lookat(camera_t *cam, vec3 target);
 void camera_enable(camera_t *cam);
 frustum camera_frustum_build(camera_t *cam);
 camera_t *camera_get_active();
 int ui_camera(camera_t *cam);
 void ddraw_camera(camera_t *cam);
typedef struct object_t {
    uint64_t renderbucket;
    mat44 transform;
    quat rot;
    vec3 sca, pos, euler, pivot;
    texture_t* textures;
    model_t model;
    anim_t anim;
    float anim_speed;
    aabb bounds;
    unsigned billboard;
    bool disable_frustum_check;
    bool cast_shadows;
    handle* old_texture_ids;
    texture_t* old_textures;
    float distance;
    bool skip_draw;
    bool light_cached;
} object_t;
 object_t object();
 void object_rotate(object_t *obj, vec3 euler);
 void object_pivot(object_t *obj, vec3 euler);
 void object_teleport(object_t *obj, vec3 pos);
 void object_move(object_t *obj, vec3 inc);
 vec3 object_position(object_t *obj);
 void object_scale(object_t *obj, vec3 sca);
 void object_model(object_t *obj, model_t model);
 void object_anim(object_t *obj, anim_t anim, float speed);
 void object_diffuse(object_t *obj, texture_t tex);
 void object_diffuse_push(object_t *obj, texture_t tex);
 void object_diffuse_pop(object_t *obj);
 void object_billboard(object_t *obj, unsigned mode);
enum SCENE_FLAGS {
    SCENE_WIREFRAME = 1,
    SCENE_CULLFACE = 2,
    SCENE_BACKGROUND = 4,
    SCENE_FOREGROUND = 8,
    SCENE_UPDATE_SH_COEF = 16,
    SCENE_CAST_SHADOWS = 32,
};
typedef struct scene_t {
    object_t* objs;
    light_t* lights;
    skybox_t skybox;
    int u_coefficients_sh;
    shadowmap_t shadowmap;
} scene_t;
 scene_t* scene_push();
 void scene_pop();
 scene_t* scene_get_active();
 int scene_merge(const char *source);
 void scene_render(int flags);
 object_t* scene_spawn();
 unsigned scene_count();
 object_t* scene_index(unsigned index);
 light_t* scene_spawn_light();
 unsigned scene_count_light();
 light_t* scene_index_light(unsigned index);
 char* tempvl(const char *fmt, va_list);
 char* tempva(const char *fmt, ...);
 char* strcatf(char **s, const char *buf);
 int strmatch(const char *s, const char *wildcard);
 int strmatchi(const char *s, const char *wildcard);
 int strcmp_qsort(const void *a, const void *b);
 int strcmpi_qsort(const void *a, const void *b);
 bool strbeg(const char *src, const char *sub);
 bool strend(const char *src, const char *sub);
 bool strbegi(const char *src, const char *sub);
 bool strendi(const char *src, const char *sub);
 const char * strstri(const char *src, const char *sub);
 char * strupper(const char *str);
 char * strlower(const char *str);
 char * strrepl(char **copy, const char *target, const char *replace);
 char * strswap(char *copy, const char *target, const char *replace);
 char * strcut(char *copy, const char *target);
 const char * strlerp(unsigned numpairs, const char **pairs, const char *str);
 size_t strlcat(char *dst, const char *src, size_t dstcap);
 size_t strlcpy(char *dst, const char *src, size_t dstcap);
 char** strsplit(const char *string, const char *delimiters);
 char* strjoin(char** list, const char *separator);
 char* string8(const wchar_t *str);
 uint32_t* string32( const char *utf8 );
 const char* codepoint_to_utf8(unsigned cp);
 unsigned intern( const char *string );
 const char *quark( unsigned key );
typedef struct quarks_db {
    char* blob;
    vec2i* entries;
} quarks_db;
 unsigned quark_intern( quarks_db*, const char *string );
 const char *quark_string( quarks_db*, unsigned key );
 bool kit_load( const char *filename );
 bool kit_merge( const char *filename );
 void kit_insert( const char *id, const char *translation );
 void kit_clear();
 void kit_set( const char *variable, const char *value );
 void kit_reset();
 void kit_dump_state( FILE *fp );
 char* kit_translate2( const char *id, const char *langcode_iso639_1 );
 void kit_locale( const char *langcode_iso639_1 );
 char* kit_translate( const char *id );
typedef enum SPRITE_FLAGS {
    SPRITE_PROJECTED = 1,
    SPRITE_ADDITIVE = 2,
    SPRITE_CENTERED = 4,
    SPRITE_RESOLUTION_INDEPENDANT = 128,
} SPRITE_FLAGS;
 void sprite( texture_t texture, float position[3], float rotation , unsigned color , unsigned flags);
 void sprite_rect( texture_t t, vec4 rect, vec4 pos, vec4 scaleoff, float tilt_deg, unsigned tint_rgba, unsigned flags);
 void sprite_sheet( texture_t texture, float sheet[3], float position[3], float rotation, float offset[2], float scale[2], unsigned rgba, unsigned flags);
 void sprite_flush();
typedef struct tileset_t {
    texture_t tex;
    unsigned tile_w, tile_h;
    unsigned cols, rows;
    unsigned selected;
} tileset_t;
 tileset_t tileset(texture_t tex, unsigned tile_w, unsigned tile_h, unsigned cols, unsigned rows);
 int ui_tileset( tileset_t t );
typedef struct tilemap_t {
    int blank_chr;
    unsigned cols, rows;
    int* map;
    vec3 position;
    float zindex;
    float tilt;
    unsigned tint;
    bool is_additive;
} tilemap_t;
 tilemap_t tilemap(const char *map, int blank_chr, int linefeed_chr);
 void tilemap_render( tilemap_t m, tileset_t style );
 void tilemap_render_ext( tilemap_t m, tileset_t style, float zindex, float xy_zoom[3], float tilt, unsigned tint, bool is_additive );
typedef struct tiled_t {
    char *map_name;
    unsigned first_gid, tilew, tileh, w, h;
    bool parallax;
    vec3 position;
    bool* visible;
    tilemap_t* layers;
    tileset_t* sets;
    char** names;
} tiled_t;
 tiled_t tiled(const char *file_tmx);
 void tiled_render(tiled_t tmx, vec3 pos);
 void ui_tiled(tiled_t *t);
typedef struct spine_t spine_t;
 spine_t*spine(const char *file_json, const char *file_atlas, unsigned flags);
 void spine_skin(spine_t *p, unsigned skin);
 void spine_render(spine_t *p, vec3 offset, unsigned flags);
 void spine_animate(spine_t *p, float delta);
 void ui_spine(spine_t *p);
typedef struct atlas_frame_t {
    unsigned delay;
    vec4 sheet;
    vec2 anchor;
    vec3i* indices;
    vec2* coords;
    vec2* uvs;
} atlas_frame_t;
typedef struct atlas_anim_t {
    unsigned name;
    unsigned* frames;
} atlas_anim_t;
typedef struct atlas_slice_frame_t {
    vec4 bounds;
    bool has_9slice;
    vec4 core;
    vec2 pivot;
    unsigned color;
    char *text;
} atlas_slice_frame_t;
typedef struct atlas_slice_t {
    unsigned name;
    unsigned* frames;
} atlas_slice_t;
typedef struct atlas_t {
    texture_t tex;
    atlas_frame_t* frames;
    atlas_anim_t* anims;
    atlas_slice_t* slices;
    atlas_slice_frame_t* slice_frames;
    quarks_db db;
} atlas_t;
 atlas_t atlas_create(const char *inifile, unsigned flags);
 int ui_atlas(atlas_t *a);
 int ui_atlas_frame(atlas_frame_t *f);
 void atlas_destroy(atlas_t *a);
typedef struct sprite_t { struct { const char *objname; uintptr_t objheader; struct obj** objchildren; };
    vec4 gamepad;
    vec2 fire;
    vec4 pos;
    vec2 sca;
    float tilt;
    unsigned tint;
    unsigned frame;
    unsigned timer, timer_ms;
    unsigned flip_, flipped;
    unsigned play;
    bool paused;
    struct atlas_t *a;
} sprite_t;
enum { OBJTYPE_sprite_t = 10 }; ; ;;
 void sprite_ctor(sprite_t *s);
 void sprite_dtor(sprite_t *s);
 void sprite_tick(sprite_t *s);
 void sprite_draw(sprite_t *s);
 void sprite_edit(sprite_t *s);
 sprite_t*sprite_new(const char *ase, int bindings[6]);
 void sprite_del(sprite_t *s);
 void sprite_setanim(sprite_t *s, unsigned name);
typedef struct guiskin_t {
    void (*drawrect)(void* userdata, const char *skin, const char *fallback, vec4 rect);
    void (*getskinsize)(void* userdata, const char *skin, const char *fallback, vec2 *size);
    void (*getskincolor)(void* userdata, const char *skin, const char *fallback, unsigned *color);
    void (*getscissorrect)(void* userdata, const char *skin, const char *fallback, vec4 rect, vec4 *dims);
    bool (*ismouseinrect)(void* userdata, const char *skin, const char *fallback, vec4 rect);
    void (*free)(void* userdata);
    void *userdata;
} guiskin_t;
 void gui_pushskin(guiskin_t skin);
 void* gui_userdata();
 vec2 gui_getskinsize(const char *skin, const char *fallback);
 unsigned gui_getskincolor(const char *skin, const char *fallback);
 bool gui_ismouseinrect(const char *skin, const char *fallback, vec4 rect);
 vec4 gui_getscissorrect(const char *skin, const char *fallback, vec4 rect);
 void gui_panel_id(int id, vec4 rect, const char *skin);
 void gui_rect_id(int id, vec4 rect, const char *skin);
 void gui_label_id(int id, const char *skin, const char *text, vec4 rect);
 bool gui_button_id(int id, vec4 rect, const char *skin);
 bool gui_button_label_id(int id, const char *text, vec4 rect, const char *skin);
 bool gui_slider_id(int id, vec4 rect, const char *skin, float min, float max, float step, float *value);
 bool gui_slider_label_id(int id, const char *text, vec4 rect, const char *skin, float min, float max, float step, float *value);
 void gui_panel_end();
 void gui_popskin();
typedef struct skinned_t {
    atlas_t atlas;
    float scale;
} skinned_t;
 guiskin_t gui_skinned(const char *asefile, float scale);
 void* thread( int (*thread_func)(void* user_data), void* user_data );
 void thread_destroy( void *thd );
 int argc();
 char* argv(int);
 void argvadd(const char *arg);
 int flag(const char *commalist);
 const char* option(const char *commalist, const char *defaults);
 int optioni(const char *commalist, int defaults);
 float optionf(const char *commalist, float defaults);
 void tty_attach();
 void tty_detach();
 void tty_color(unsigned color);
 void tty_reset();
 const char* app_exec(const char *command);
 int app_spawn(const char *command);
 int app_cores();
 int app_battery();
 const char* app_name();
 const char* app_path();
 const char* app_cache();
 const char* app_temp();
 const char* app_cmdline();
 void app_beep();
 void app_hang();
 void app_crash();
 void app_singleton(const char *guid);
 bool app_open(const char *folder_file_or_url);
 const char* app_loadfile();
 const char* app_savefile();
 char* callstack( int traces );
 int callstackf( FILE *fp, int traces );
 void die(const char *message);
 void alert(const char *message);
 void hexdump( const void *ptr, unsigned len );
 void hexdumpf( FILE *fp, const void *ptr, unsigned len, int width );
 void breakpoint();
 bool has_debugger();
 void trap_install(void);
 const char *trap_name(int signal);
 void trap_on_ignore(int signal);
 void trap_on_quit(int signal);
 void trap_on_abort(int signal);
 void trap_on_debug(int signal);
 int (PANIC)(const char *error, const char *file, int line);
 int (PRINTF)(const char *text, const char *stack, const char *file, int line, const char *function);
 int (test)(const char *file, int line, const char *expr, bool result);
 uint64_t date();
 uint64_t date_epoch();
 char* date_string();
 double time_hh();
 double time_mm();
 double time_ss();
 uint64_t time_ms();
 uint64_t time_us();
 uint64_t time_ns();
 void sleep_ss(double ss);
 void sleep_ms(double ms);
 void sleep_us(double us);
 void sleep_ns(double us);
 unsigned timer(unsigned ms, unsigned (*callback)(unsigned ms, void *arg), void *arg);
 void timer_destroy(unsigned timer_handle);
typedef vec3i guid;
 guid guid_create();
 float ease_zero(float t);
 float ease_one(float t);
 float ease_linear(float t);
 float ease_out_sine(float t);
 float ease_out_quad(float t);
 float ease_out_cubic(float t);
 float ease_out_quart(float t);
 float ease_out_quint(float t);
 float ease_out_expo(float t);
 float ease_out_circ(float t);
 float ease_out_back(float t);
 float ease_out_elastic(float t);
 float ease_out_bounce(float t);
 float ease_in_sine(float t);
 float ease_in_quad(float t);
 float ease_in_cubic(float t);
 float ease_in_quart(float t);
 float ease_in_quint(float t);
 float ease_in_expo(float t);
 float ease_in_circ(float t);
 float ease_in_back(float t);
 float ease_in_elastic(float t);
 float ease_in_bounce(float t);
 float ease_inout_sine(float t);
 float ease_inout_quad(float t);
 float ease_inout_cubic(float t);
 float ease_inout_quart(float t);
 float ease_inout_quint(float t);
 float ease_inout_expo(float t);
 float ease_inout_circ(float t);
 float ease_inout_back(float t);
 float ease_inout_elastic(float t);
 float ease_inout_bounce(float t);
 float ease_inout_perlin(float t);
enum EASE_FLAGS {
    EASE_SINE,
    EASE_QUAD,
    EASE_CUBIC,
    EASE_QUART,
    EASE_QUINT,
    EASE_EXPO,
    EASE_CIRC,
    EASE_BACK,
    EASE_ELASTIC,
    EASE_BOUNCE,
    EASE_IN,
    EASE_OUT = 0,
    EASE_INOUT = EASE_IN * 2,
    EASE_ZERO = EASE_INOUT | (EASE_BOUNCE + 1),
    EASE_ONE,
    EASE_LINEAR,
    EASE_INOUT_PERLIN,
    EASE_NUM
};
 float ease(float t01, unsigned fn);
 float ease_pong(float t01, unsigned fn);
 float ease_ping_pong(float t, unsigned fn1, unsigned fn2);
 float ease_pong_ping(float t, unsigned fn1, unsigned fn2);
 const char *ease_enum(unsigned fn);
 const char**ease_enums();
typedef struct tween_keyframe_t {
    float t;
    vec3 v;
    unsigned ease;
} tween_keyframe_t;
typedef struct tween_t {
    tween_keyframe_t* keyframes;
    vec3 result;
    float time;
    float duration;
} tween_t;
 tween_t tween();
 void tween_setkey(tween_t *tw, float t, vec3 v, unsigned easing_mode);
 void tween_delkey(tween_t *tw, float t);
 float tween_update(tween_t *tw, float dt);
 void tween_reset(tween_t *tw);
 void tween_destroy(tween_t *tw);
typedef struct curve_t {
    float* lengths;
    unsigned* colors;
    vec3* samples;
    vec3* points;
    int* indices;
} curve_t;
 curve_t curve();
 void curve_add(curve_t *c, vec3 p);
 void curve_end(curve_t *c, int num_points);
 vec3 curve_eval(curve_t *c, float dt, unsigned *color);
 void curve_destroy(curve_t *c);
enum PANEL_FLAGS {
    PANEL_OPEN = 1,
};
 int ui_notify(const char *title, const char *body);
 int ui_window(const char *title, int *enabled);
 int ui_panel(const char *title, int flags);
 int ui_collapse(const char *label, const char *id);
 int ui_collapseo(const char *label, const char *id);
 int ui_contextual();
 int ui_section(const char *title);
 int ui_int(const char *label, int *value);
 int ui_bool(const char *label, bool *value);
 int ui_short(const char *label, short *value);
 int ui_float_(const char *label, float *value, float step);
 int ui_float2_(const char *label, float value[2], float step);
 int ui_float3_(const char *label, float value[3], float step);
 int ui_float4_(const char *label, float value[4], float step);
 int ui_float(const char *label, float *value);
 int ui_float2(const char *label, float value[2]);
 int ui_float3(const char *label, float value[3]);
 int ui_float4(const char *label, float value[4]);
 int ui_mat33(const char *label, float mat33[9]);
 int ui_mat34(const char *label, float mat34[12]);
 int ui_mat44(const char *label, float mat44[16]);
 int ui_double(const char *label, double *value);
 int ui_buffer(const char *label, char *buffer, int buflen);
 int ui_string(const char *label, char **string);
 int ui_color3(const char *label, unsigned *color);
 int ui_color3f(const char *label, float color[3]);
 int ui_color4(const char *label, unsigned *color);
 int ui_color4f(const char *label, float color[4]);
 int ui_unsigned(const char *label, unsigned *value);
 int ui_unsigned2(const char *label, unsigned *value);
 int ui_unsigned3(const char *label, unsigned *value);
 int ui_button(const char *label);
 int ui_button_transparent(const char *label);
 int ui_buttons(int buttons, ...);
 int ui_toolbar(const char *options);
 int ui_submenu(const char *options);
 int ui_browse(const char **outfile, bool *inlined);
 int ui_toggle(const char *label, bool *value);
 int ui_dialog(const char *title, const char *text, int choices, bool *show);
 int ui_list(const char *label, const char **items, int num_items, int *selector);
 int ui_radio(const char *label, const char **items, int num_items, int *selector);
 int ui_texture(const char *label, texture_t t);
 int ui_subtexture(const char *label, texture_t t, unsigned x, unsigned y, unsigned w, unsigned h);
 int ui_image(const char *label, handle id, unsigned w, unsigned h);
 int ui_subimage(const char *label, handle id, unsigned iw, unsigned ih, unsigned sx, unsigned sy, unsigned sw, unsigned sh);
 int ui_colormap(const char *label, colormap_t *cm);
 int ui_separator();
 int ui_bitmask8(const char *label, uint8_t *bits);
 int ui_bitmask16(const char *label, uint16_t *bits);
 int ui_console();
 int ui_clampf_(const char *label, float *value, float minf, float maxf, float step);
 int ui_clampf(const char *label, float *value, float minf, float maxf);
 int ui_label(const char *label);
 int ui_label2(const char *label, const char *caption);
 int ui_label2_bool(const char *label, bool enabled);
 int ui_label2_float(const char *label, float value);
 int ui_label2_toolbar(const char *label, const char *icons);
 int ui_slider(const char *label, float *value);
 int ui_slider2(const char *label, float *value, const char *caption);
 int ui_contextual_end(int close);
 int ui_collapse_clicked();
 int ui_collapse_end();
 int ui_panel_end();
 int ui_window_end();
 int ui_show(const char *panel_or_window_title, int enabled);
 int ui_dims(const char *panel_or_window_title, float width, float height);
 int ui_visible(const char *panel_or_window_title);
 vec2 ui_get_dims();
 int ui_enable();
 int ui_enabled();
 int ui_disable();
 int ui_has_menubar();
 int ui_menu(const char *items);
 int ui_menu_editbox(char *buf, int bufcap);
 int ui_item();
 int ui_popups();
 int ui_hover();
 int ui_active();
 int ui_demo(int do_windows);
 void *ui_handle();
enum VIDEO_FLAGS {
    VIDEO_YCBCR = 0,
    VIDEO_RGB = 2,
    VIDEO_AUDIO = 0,
    VIDEO_NO_AUDIO = 4,
    VIDEO_LOOP = 8,
};
typedef struct video_t video_t;
 video_t* video( const char *filename, int flags );
 texture_t* video_decode( video_t *v );
 texture_t* video_textures( video_t *v );
 int video_has_finished(video_t *v);
 double video_duration(video_t *v);
 int video_seek(video_t *v, double seek_to);
 double video_position(video_t *v);
 void video_pause(video_t *v, bool paused);
 bool video_is_paused(video_t *v);
 bool video_is_rgb(video_t *v);
 void video_destroy( video_t *v );
 bool record_start(const char *outfile_mp4);
 bool record_active();
 void record_stop(void);
enum WINDOW_FLAGS {
    WINDOW_MSAA2 = 0x02,
    WINDOW_MSAA4 = 0x04,
    WINDOW_MSAA8 = 0x08,
    WINDOW_SQUARE = 0x20,
    WINDOW_PORTRAIT = 0x40,
    WINDOW_LANDSCAPE = 0x80,
    WINDOW_ASPECT = 0x100,
    WINDOW_FIXED = 0x200,
    WINDOW_TRANSPARENT = 0x400,
    WINDOW_BORDERLESS = 0x800,
    WINDOW_TRUE_BORDERLESS = 0x4000,
    WINDOW_VSYNC_DISABLED = 0,
    WINDOW_VSYNC_ADAPTIVE = 0x1000,
    WINDOW_VSYNC = 0x2000,
};
 bool window_create(float scale, unsigned flags);
 bool window_create_from_handle(void *handle, float scale, unsigned flags);
 void window_destroy();
 void window_reload();
 int window_frame_begin();
 void window_frame_end();
 void window_frame_swap();
 int window_swap();
 void window_loop(void (*function)(void* loopArg), void* loopArg );
 void window_loop_exit();
 void window_title(const char *title);
 void window_color(unsigned color);
 char window_msaa();
 vec2 window_canvas();
 void* window_handle();
 char* window_stats();
 uint64_t window_frame();
 int window_width();
 int window_height();
 double window_time();
 double window_delta();
 void window_focus();
 int window_has_focus();
 void window_fullscreen(int enabled);
 int window_has_fullscreen();
 void window_cursor(int visible);
 int window_has_cursor();
 void window_pause(int paused);
 int window_has_pause();
 void window_visible(int visible);
 int window_has_visible();
 void window_maximize(int enabled);
 int window_has_maximize();
 void window_transparent(int enabled);
 int window_has_transparent();
 void window_icon(const char *file_icon);
 int window_has_icon();
 void window_debug(int visible);
 int window_has_debug();
 double window_aspect();
 void window_aspect_lock(unsigned numer, unsigned denom);
 void window_aspect_unlock();
 double window_fps();
 double window_fps_target();
 void window_fps_lock(float fps);
 void window_fps_unlock();
 void window_fps_vsync(int vsync);
 void window_screenshot(const char* outfile_png);
 int window_record(const char *outfile_mp4);
 vec2 window_dpi();
enum CURSOR_SHAPES {
    CURSOR_NONE,
    CURSOR_HW_ARROW,
    CURSOR_HW_IBEAM,
    CURSOR_HW_HDRAG,
    CURSOR_HW_VDRAG,
    CURSOR_HW_HAND,
    CURSOR_HW_CROSS,
    CURSOR_SW_AUTO,
};
 void window_cursor_shape(unsigned shape);
 const char *window_clipboard();
 void window_setclipboard(const char *text);
typedef struct editor_bind_t {
    const char *command;
    const char *bindings;
    void (*fn)();
} editor_bind_t;
 void editor_addbind(editor_bind_t bind);
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_open_map_t;  editor_open_map_t *editor_open_map();  int editor_open(const void *obj);  void editor_setopen(const void *obj, int value);  void editor_altopen(const void *obj);  void editor_noopen(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_selected_map_t;  editor_selected_map_t *editor_selected_map();  int editor_selected(const void *obj);  void editor_setselected(const void *obj, int value);  void editor_altselected(const void *obj);  void editor_noselected(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_changed_map_t;  editor_changed_map_t *editor_changed_map();  int editor_changed(const void *obj);  void editor_setchanged(const void *obj, int value);  void editor_altchanged(const void *obj);  void editor_nochanged(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_popup_map_t;  editor_popup_map_t *editor_popup_map();  int editor_popup(const void *obj);  void editor_setpopup(const void *obj, int value);  void editor_altpopup(const void *obj);  void editor_nopopup(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_bookmarked_map_t;  editor_bookmarked_map_t *editor_bookmarked_map();  int editor_bookmarked(const void *obj);  void editor_setbookmarked(const void *obj, int value);  void editor_altbookmarked(const void *obj);  void editor_nobookmarked(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_visible_map_t;  editor_visible_map_t *editor_visible_map();  int editor_visible(const void *obj);  void editor_setvisible(const void *obj, int value);  void editor_altvisible(const void *obj);  void editor_novisible(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_script_map_t;  editor_script_map_t *editor_script_map();  int editor_script(const void *obj);  void editor_setscript(const void *obj, int value);  void editor_altscript(const void *obj);  void editor_noscript(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_event_map_t;  editor_event_map_t *editor_event_map();  int editor_event(const void *obj);  void editor_setevent(const void *obj, int value);  void editor_altevent(const void *obj);  void editor_noevent(void *obj);;
typedef struct { map base; struct { pair p; void* key; char* val; } tmp, *ptr; char** tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_iconinstance_map_t;  editor_iconinstance_map_t *editor_iconinstance_map();  char* editor_iconinstance(const void *obj);  void editor_seticoninstance(const void *obj, char* value);  void editor_alticoninstance(const void *obj);  void editor_noiconinstance(void *obj);;
typedef struct { map base; struct { pair p; void* key; char* val; } tmp, *ptr; char** tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_iconclass_map_t;  editor_iconclass_map_t *editor_iconclass_map();  char* editor_iconclass(const void *obj);  void editor_seticonclass(const void *obj, char* value);  void editor_alticonclass(const void *obj);  void editor_noiconclass(void *obj);;
typedef struct { map base; struct { pair p; void* key; int val; } tmp, *ptr; int* tmpval; int (*typed_cmp)(void*, void*); uint64_t (*typed_hash)(void*); } * editor_treeoffsety_map_t;  editor_treeoffsety_map_t *editor_treeoffsety_map();  int editor_treeoffsety(const void *obj);  void editor_settreeoffsety(const void *obj, int value);  void editor_alttreeoffsety(const void *obj);  void editor_notreeoffsety(void *obj);;
 void editor_destroy_properties(void *o);
 void editor_load_on_boot(void);
 void editor_save_on_quit(void);
enum EDITOR_MODE {
    EDITOR_PANEL,
    EDITOR_WINDOW,
    EDITOR_WINDOW_NK,
    EDITOR_WINDOW_NK_SMALL,
};
 int editor_begin(const char *title, int mode);
 int editor_end(int mode);
 int editor_filter();
 void editor_select(const char *mask);
 void editor_unselect();
 void editor_select_aabb(aabb box);
 void editor_selectgroup(obj *first, obj *last);
 void* editor_first_selected();
 void* editor_last_selected();
 void editor_addtoworld(obj *o);
 void editor_watch(const void *o);
 void* editor_spawn(const char *ini);
 void editor_spawn1();
 void editor_destroy_selected();
 void editor_inspect(obj *o);
 vec3 editor_pick(float mouse_x, float mouse_y);
 char* editor_path(const char *path);
 void editor_setmouse(int x, int y);
 vec2 editor_glyph(int x, int y, const char *style, unsigned codepoint);
 vec2 editor_glyphs(int x, int y, const char *style, const char *utf8);
 void editor_gizmos(int dim);
 int editor_send(const char *cmd);
 const char* editor_recv(int jobid, double timeout_ss);
 void editor_pump();
 void editor_frame( void (*game)(unsigned, float, double) );
 float* engine_getf(const char *key);
 int* engine_geti(const char *key);
 char** engine_gets(const char *key);
 int engine_send(const char *cmd, const char *optional_value);
 int ui_engine();
typedef void (*GLADapiproc)(void);
typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);
typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);
typedef int32_t khronos_int32_t;
typedef uint32_t khronos_uint32_t;
typedef int64_t khronos_int64_t;
typedef uint64_t khronos_uint64_t;
typedef signed char khronos_int8_t;
typedef unsigned char khronos_uint8_t;
typedef signed short int khronos_int16_t;
typedef unsigned short int khronos_uint16_t;
typedef signed long int khronos_intptr_t;
typedef unsigned long int khronos_uintptr_t;
typedef signed long int khronos_ssize_t;
typedef unsigned long int khronos_usize_t;
typedef float khronos_float_t;
typedef khronos_uint64_t khronos_utime_nanoseconds_t;
typedef khronos_int64_t khronos_stime_nanoseconds_t;
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 0x7FFFFFFF
} khronos_boolean_enum_t;
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef unsigned int GLhandleARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void ( *GLVULKANPROCNV)(void);
extern int GLAD_GL_VERSION_1_0;
extern int GLAD_GL_VERSION_1_1;
extern int GLAD_GL_VERSION_1_2;
extern int GLAD_GL_VERSION_1_3;
extern int GLAD_GL_VERSION_1_4;
extern int GLAD_GL_VERSION_1_5;
extern int GLAD_GL_VERSION_2_0;
extern int GLAD_GL_VERSION_2_1;
extern int GLAD_GL_VERSION_3_0;
extern int GLAD_GL_VERSION_3_1;
extern int GLAD_GL_VERSION_3_2;
extern int GLAD_GL_VERSION_3_3;
extern int GLAD_GL_ARB_ES2_compatibility;
extern int GLAD_GL_ARB_ES3_1_compatibility;
extern int GLAD_GL_ARB_ES3_2_compatibility;
extern int GLAD_GL_ARB_ES3_compatibility;
extern int GLAD_GL_ARB_arrays_of_arrays;
extern int GLAD_GL_ARB_base_instance;
extern int GLAD_GL_ARB_bindless_texture;
extern int GLAD_GL_ARB_blend_func_extended;
extern int GLAD_GL_ARB_buffer_storage;
extern int GLAD_GL_ARB_cl_event;
extern int GLAD_GL_ARB_clear_buffer_object;
extern int GLAD_GL_ARB_clear_texture;
extern int GLAD_GL_ARB_clip_control;
extern int GLAD_GL_ARB_color_buffer_float;
extern int GLAD_GL_ARB_compatibility;
extern int GLAD_GL_ARB_compressed_texture_pixel_storage;
extern int GLAD_GL_ARB_compute_shader;
extern int GLAD_GL_ARB_compute_variable_group_size;
extern int GLAD_GL_ARB_conditional_render_inverted;
extern int GLAD_GL_ARB_conservative_depth;
extern int GLAD_GL_ARB_copy_buffer;
extern int GLAD_GL_ARB_copy_image;
extern int GLAD_GL_ARB_cull_distance;
extern int GLAD_GL_ARB_debug_output;
extern int GLAD_GL_ARB_depth_buffer_float;
extern int GLAD_GL_ARB_depth_clamp;
extern int GLAD_GL_ARB_depth_texture;
extern int GLAD_GL_ARB_derivative_control;
extern int GLAD_GL_ARB_direct_state_access;
extern int GLAD_GL_ARB_draw_buffers;
extern int GLAD_GL_ARB_draw_buffers_blend;
extern int GLAD_GL_ARB_draw_elements_base_vertex;
extern int GLAD_GL_ARB_draw_indirect;
extern int GLAD_GL_ARB_draw_instanced;
extern int GLAD_GL_ARB_enhanced_layouts;
extern int GLAD_GL_ARB_explicit_attrib_location;
extern int GLAD_GL_ARB_explicit_uniform_location;
extern int GLAD_GL_ARB_fragment_coord_conventions;
extern int GLAD_GL_ARB_fragment_layer_viewport;
extern int GLAD_GL_ARB_fragment_program;
extern int GLAD_GL_ARB_fragment_program_shadow;
extern int GLAD_GL_ARB_fragment_shader;
extern int GLAD_GL_ARB_fragment_shader_interlock;
extern int GLAD_GL_ARB_framebuffer_no_attachments;
extern int GLAD_GL_ARB_framebuffer_object;
extern int GLAD_GL_ARB_framebuffer_sRGB;
extern int GLAD_GL_ARB_geometry_shader4;
extern int GLAD_GL_ARB_get_program_binary;
extern int GLAD_GL_ARB_get_texture_sub_image;
extern int GLAD_GL_ARB_gl_spirv;
extern int GLAD_GL_ARB_gpu_shader5;
extern int GLAD_GL_ARB_gpu_shader_fp64;
extern int GLAD_GL_ARB_gpu_shader_int64;
extern int GLAD_GL_ARB_half_float_pixel;
extern int GLAD_GL_ARB_half_float_vertex;
extern int GLAD_GL_ARB_imaging;
extern int GLAD_GL_ARB_indirect_parameters;
extern int GLAD_GL_ARB_instanced_arrays;
extern int GLAD_GL_ARB_internalformat_query;
extern int GLAD_GL_ARB_internalformat_query2;
extern int GLAD_GL_ARB_invalidate_subdata;
extern int GLAD_GL_ARB_map_buffer_alignment;
extern int GLAD_GL_ARB_map_buffer_range;
extern int GLAD_GL_ARB_matrix_palette;
extern int GLAD_GL_ARB_multi_bind;
extern int GLAD_GL_ARB_multi_draw_indirect;
extern int GLAD_GL_ARB_multisample;
extern int GLAD_GL_ARB_multitexture;
extern int GLAD_GL_ARB_occlusion_query;
extern int GLAD_GL_ARB_occlusion_query2;
extern int GLAD_GL_ARB_parallel_shader_compile;
extern int GLAD_GL_ARB_pipeline_statistics_query;
extern int GLAD_GL_ARB_pixel_buffer_object;
extern int GLAD_GL_ARB_point_parameters;
extern int GLAD_GL_ARB_point_sprite;
extern int GLAD_GL_ARB_polygon_offset_clamp;
extern int GLAD_GL_ARB_post_depth_coverage;
extern int GLAD_GL_ARB_program_interface_query;
extern int GLAD_GL_ARB_provoking_vertex;
extern int GLAD_GL_ARB_query_buffer_object;
extern int GLAD_GL_ARB_robust_buffer_access_behavior;
extern int GLAD_GL_ARB_robustness;
extern int GLAD_GL_ARB_robustness_isolation;
extern int GLAD_GL_ARB_sample_locations;
extern int GLAD_GL_ARB_sample_shading;
extern int GLAD_GL_ARB_sampler_objects;
extern int GLAD_GL_ARB_seamless_cube_map;
extern int GLAD_GL_ARB_seamless_cubemap_per_texture;
extern int GLAD_GL_ARB_separate_shader_objects;
extern int GLAD_GL_ARB_shader_atomic_counter_ops;
extern int GLAD_GL_ARB_shader_atomic_counters;
extern int GLAD_GL_ARB_shader_ballot;
extern int GLAD_GL_ARB_shader_bit_encoding;
extern int GLAD_GL_ARB_shader_clock;
extern int GLAD_GL_ARB_shader_draw_parameters;
extern int GLAD_GL_ARB_shader_group_vote;
extern int GLAD_GL_ARB_shader_image_load_store;
extern int GLAD_GL_ARB_shader_image_size;
extern int GLAD_GL_ARB_shader_objects;
extern int GLAD_GL_ARB_shader_precision;
extern int GLAD_GL_ARB_shader_stencil_export;
extern int GLAD_GL_ARB_shader_storage_buffer_object;
extern int GLAD_GL_ARB_shader_subroutine;
extern int GLAD_GL_ARB_shader_texture_image_samples;
extern int GLAD_GL_ARB_shader_texture_lod;
extern int GLAD_GL_ARB_shader_viewport_layer_array;
extern int GLAD_GL_ARB_shading_language_100;
extern int GLAD_GL_ARB_shading_language_420pack;
extern int GLAD_GL_ARB_shading_language_include;
extern int GLAD_GL_ARB_shading_language_packing;
extern int GLAD_GL_ARB_shadow;
extern int GLAD_GL_ARB_shadow_ambient;
extern int GLAD_GL_ARB_sparse_buffer;
extern int GLAD_GL_ARB_sparse_texture;
extern int GLAD_GL_ARB_sparse_texture2;
extern int GLAD_GL_ARB_sparse_texture_clamp;
extern int GLAD_GL_ARB_spirv_extensions;
extern int GLAD_GL_ARB_stencil_texturing;
extern int GLAD_GL_ARB_sync;
extern int GLAD_GL_ARB_tessellation_shader;
extern int GLAD_GL_ARB_texture_barrier;
extern int GLAD_GL_ARB_texture_border_clamp;
extern int GLAD_GL_ARB_texture_buffer_object;
extern int GLAD_GL_ARB_texture_buffer_object_rgb32;
extern int GLAD_GL_ARB_texture_buffer_range;
extern int GLAD_GL_ARB_texture_compression;
extern int GLAD_GL_ARB_texture_compression_bptc;
extern int GLAD_GL_ARB_texture_compression_rgtc;
extern int GLAD_GL_ARB_texture_cube_map;
extern int GLAD_GL_ARB_texture_cube_map_array;
extern int GLAD_GL_ARB_texture_env_add;
extern int GLAD_GL_ARB_texture_env_combine;
extern int GLAD_GL_ARB_texture_env_crossbar;
extern int GLAD_GL_ARB_texture_env_dot3;
extern int GLAD_GL_ARB_texture_filter_anisotropic;
extern int GLAD_GL_ARB_texture_filter_minmax;
extern int GLAD_GL_ARB_texture_float;
extern int GLAD_GL_ARB_texture_gather;
extern int GLAD_GL_ARB_texture_mirror_clamp_to_edge;
extern int GLAD_GL_ARB_texture_mirrored_repeat;
extern int GLAD_GL_ARB_texture_multisample;
extern int GLAD_GL_ARB_texture_non_power_of_two;
extern int GLAD_GL_ARB_texture_query_levels;
extern int GLAD_GL_ARB_texture_query_lod;
extern int GLAD_GL_ARB_texture_rectangle;
extern int GLAD_GL_ARB_texture_rg;
extern int GLAD_GL_ARB_texture_rgb10_a2ui;
extern int GLAD_GL_ARB_texture_stencil8;
extern int GLAD_GL_ARB_texture_storage;
extern int GLAD_GL_ARB_texture_storage_multisample;
extern int GLAD_GL_ARB_texture_swizzle;
extern int GLAD_GL_ARB_texture_view;
extern int GLAD_GL_ARB_timer_query;
extern int GLAD_GL_ARB_transform_feedback2;
extern int GLAD_GL_ARB_transform_feedback3;
extern int GLAD_GL_ARB_transform_feedback_instanced;
extern int GLAD_GL_ARB_transform_feedback_overflow_query;
extern int GLAD_GL_ARB_transpose_matrix;
extern int GLAD_GL_ARB_uniform_buffer_object;
extern int GLAD_GL_ARB_vertex_array_bgra;
extern int GLAD_GL_ARB_vertex_array_object;
extern int GLAD_GL_ARB_vertex_attrib_64bit;
extern int GLAD_GL_ARB_vertex_attrib_binding;
extern int GLAD_GL_ARB_vertex_blend;
extern int GLAD_GL_ARB_vertex_buffer_object;
extern int GLAD_GL_ARB_vertex_program;
extern int GLAD_GL_ARB_vertex_shader;
extern int GLAD_GL_ARB_vertex_type_10f_11f_11f_rev;
extern int GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
extern int GLAD_GL_ARB_viewport_array;
extern int GLAD_GL_ARB_window_pos;
extern int GLAD_GL_KHR_blend_equation_advanced;
extern int GLAD_GL_KHR_blend_equation_advanced_coherent;
extern int GLAD_GL_KHR_context_flush_control;
extern int GLAD_GL_KHR_debug;
extern int GLAD_GL_KHR_no_error;
extern int GLAD_GL_KHR_parallel_shader_compile;
extern int GLAD_GL_KHR_robust_buffer_access_behavior;
extern int GLAD_GL_KHR_robustness;
extern int GLAD_GL_KHR_shader_subgroup;
extern int GLAD_GL_KHR_texture_compression_astc_hdr;
extern int GLAD_GL_KHR_texture_compression_astc_ldr;
extern int GLAD_GL_KHR_texture_compression_astc_sliced_3d;
typedef void ( *PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void ( *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void ( *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void ( *PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void ( *PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef GLboolean ( *PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void ( *PFNGLARRAYELEMENTPROC)(GLint i);
typedef void ( *PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void ( *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void ( *PFNGLBEGINPROC)(GLenum mode);
typedef void ( *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void ( *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void ( *PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
typedef void ( *PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void ( *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void ( *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void ( *PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void ( *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void ( *PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void ( *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void ( *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( *PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
typedef void ( *PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
typedef void ( *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void ( *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef void ( *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void ( *PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void ( *PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void ( *PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void ( *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void ( *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void ( *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void ( *PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint * samplers);
typedef void ( *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void ( *PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
typedef void ( *PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void ( *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void ( *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void ( *PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void ( *PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void ( *PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef void ( *PFNGLBLENDBARRIERPROC)(void);
typedef void ( *PFNGLBLENDBARRIERKHRPROC)(void);
typedef void ( *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void ( *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void ( *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void ( *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void ( *PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void ( *PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void ( *PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
typedef void ( *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void ( *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void ( *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void ( *PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void ( *PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void ( *PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void ( *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void ( *PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void ( *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void ( *PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void ( *PFNGLBUFFERPAGECOMMITMENTARBPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void ( *PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void ( *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void ( *PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef void ( *PFNGLCALLLISTPROC)(GLuint list);
typedef void ( *PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void * lists);
typedef GLenum ( *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef GLenum ( *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
typedef void ( *PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void ( *PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
typedef void ( *PFNGLCLEARPROC)(GLbitfield mask);
typedef void ( *PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void ( *PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void ( *PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void ( *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void ( *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void ( *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void ( *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void ( *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void ( *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void ( *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void ( *PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void ( *PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void ( *PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void ( *PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void ( *PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void ( *PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void ( *PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void ( *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void ( *PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
typedef void ( *PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
typedef void ( *PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void ( *PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef GLenum ( *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void ( *PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
typedef void ( *PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble * equation);
typedef void ( *PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void ( *PFNGLCOLOR3BVPROC)(const GLbyte * v);
typedef void ( *PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void ( *PFNGLCOLOR3DVPROC)(const GLdouble * v);
typedef void ( *PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void ( *PFNGLCOLOR3FVPROC)(const GLfloat * v);
typedef void ( *PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void ( *PFNGLCOLOR3IVPROC)(const GLint * v);
typedef void ( *PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void ( *PFNGLCOLOR3SVPROC)(const GLshort * v);
typedef void ( *PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void ( *PFNGLCOLOR3UBVPROC)(const GLubyte * v);
typedef void ( *PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void ( *PFNGLCOLOR3UIVPROC)(const GLuint * v);
typedef void ( *PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void ( *PFNGLCOLOR3USVPROC)(const GLushort * v);
typedef void ( *PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void ( *PFNGLCOLOR4BVPROC)(const GLbyte * v);
typedef void ( *PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void ( *PFNGLCOLOR4DVPROC)(const GLdouble * v);
typedef void ( *PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void ( *PFNGLCOLOR4FVPROC)(const GLfloat * v);
typedef void ( *PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void ( *PFNGLCOLOR4IVPROC)(const GLint * v);
typedef void ( *PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void ( *PFNGLCOLOR4SVPROC)(const GLshort * v);
typedef void ( *PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void ( *PFNGLCOLOR4UBVPROC)(const GLubyte * v);
typedef void ( *PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void ( *PFNGLCOLOR4UIVPROC)(const GLuint * v);
typedef void ( *PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void ( *PFNGLCOLOR4USVPROC)(const GLushort * v);
typedef void ( *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void ( *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void ( *PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void ( *PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void ( *PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void ( *PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void ( *PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint * color);
typedef void ( *PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void ( *PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void ( *PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void ( *PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void ( *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void ( *PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void ( *PFNGLCOMPILESHADERINCLUDEARBPROC)(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length);
typedef void ( *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void ( *PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void ( *PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void ( *PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void ( *PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void ( *PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
typedef void ( *PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void ( *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void ( *PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void ( *PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void ( *PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void ( *PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void ( *PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void ( *PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void ( *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void ( *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void ( *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void ( *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void ( *PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void ( *PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint ( *PFNGLCREATEPROGRAMPROC)(void);
typedef GLhandleARB ( *PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef void ( *PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void ( *PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint * ids);
typedef void ( *PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void ( *PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint * samplers);
typedef GLuint ( *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB ( *PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef GLuint ( *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef GLsync ( *PFNGLCREATESYNCFROMCLEVENTARBPROC)(struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
typedef void ( *PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint * textures);
typedef void ( *PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void ( *PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void ( *PFNGLCULLFACEPROC)(GLenum mode);
typedef void ( *PFNGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
typedef void ( *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void * userParam);
typedef void ( *PFNGLDEBUGMESSAGECALLBACKARBPROC)(GLDEBUGPROCARB callback, const void * userParam);
typedef void ( *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void ( *PFNGLDEBUGMESSAGECONTROLARBPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void ( *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void ( *PFNGLDEBUGMESSAGEINSERTARBPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void ( *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void ( *PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint * buffers);
typedef void ( *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void ( *PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void ( *PFNGLDELETENAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name);
typedef void ( *PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void ( *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void ( *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void ( *PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint * programs);
typedef void ( *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void ( *PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint * ids);
typedef void ( *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void ( *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void ( *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void ( *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void ( *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void ( *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint * ids);
typedef void ( *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void ( *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void ( *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void ( *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void ( *PFNGLDEPTHRANGEARRAYDVNVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void ( *PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void ( *PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void ( *PFNGLDEPTHRANGEINDEXEDDNVPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void ( *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void ( *PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void ( *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void ( *PFNGLDISABLEPROC)(GLenum cap);
typedef void ( *PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void ( *PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void ( *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void ( *PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void ( *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void ( *PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void ( *PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
typedef void ( *PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void ( *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void ( *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect);
typedef void ( *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void ( *PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void ( *PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void ( *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void ( *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void ( *PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum * bufs);
typedef void ( *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void ( *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void ( *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect);
typedef void ( *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void ( *PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void ( *PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
typedef void ( *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void ( *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void ( *PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void ( *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void ( *PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void ( *PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
typedef void ( *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void ( *PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
typedef void ( *PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void ( *PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void * pointer);
typedef void ( *PFNGLEDGEFLAGVPROC)(const GLboolean * flag);
typedef void ( *PFNGLENABLEPROC)(GLenum cap);
typedef void ( *PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void ( *PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void ( *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void ( *PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void ( *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void ( *PFNGLENDPROC)(void);
typedef void ( *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void ( *PFNGLENDLISTPROC)(void);
typedef void ( *PFNGLENDQUERYPROC)(GLenum target);
typedef void ( *PFNGLENDQUERYARBPROC)(GLenum target);
typedef void ( *PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void ( *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void ( *PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void ( *PFNGLEVALCOORD1DVPROC)(const GLdouble * u);
typedef void ( *PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void ( *PFNGLEVALCOORD1FVPROC)(const GLfloat * u);
typedef void ( *PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void ( *PFNGLEVALCOORD2DVPROC)(const GLdouble * u);
typedef void ( *PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void ( *PFNGLEVALCOORD2FVPROC)(const GLfloat * u);
typedef void ( *PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void ( *PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void ( *PFNGLEVALPOINT1PROC)(GLint i);
typedef void ( *PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void ( *PFNGLEVALUATEDEPTHVALUESARBPROC)(void);
typedef void ( *PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat * buffer);
typedef GLsync ( *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void ( *PFNGLFINISHPROC)(void);
typedef void ( *PFNGLFLUSHPROC)(void);
typedef void ( *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void ( *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void ( *PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void ( *PFNGLFOGCOORDDVPROC)(const GLdouble * coord);
typedef void ( *PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void ( *PFNGLFOGCOORDFVPROC)(const GLfloat * coord);
typedef void ( *PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void ( *PFNGLFOGFVPROC)(GLenum pname, const GLfloat * params);
typedef void ( *PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void ( *PFNGLFOGIVPROC)(GLenum pname, const GLint * params);
typedef void ( *PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void ( *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void ( *PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat * v);
typedef void ( *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void ( *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void ( *PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void ( *PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void ( *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void ( *PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void ( *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void ( *PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void ( *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void ( *PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint * buffers);
typedef void ( *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint ( *PFNGLGENLISTSPROC)(GLsizei range);
typedef void ( *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void ( *PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint * programs);
typedef void ( *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void ( *PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint * ids);
typedef void ( *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void ( *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void ( *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void ( *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void ( *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void ( *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void ( *PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
typedef void ( *PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
typedef void ( *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void ( *PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void ( *PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void ( *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void ( *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef void ( *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void ( *PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void ( *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void ( *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void ( *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void ( *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void ( *PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef void ( *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint ( *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint ( *PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void ( *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void ( *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void ( *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void ( *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void ( *PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void ** params);
typedef void ( *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void ( *PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void ( *PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble * equation);
typedef void ( *PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void * table);
typedef void ( *PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void * img);
typedef void ( *PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void * img);
typedef void ( *PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
typedef void ( *PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
typedef void ( *PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void * image);
typedef void ( *PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint ( *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef GLuint ( *PFNGLGETDEBUGMESSAGELOGARBPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void ( *PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void ( *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum ( *PFNGLGETERRORPROC)(void);
typedef void ( *PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void ( *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef GLint ( *PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar * name);
typedef GLint ( *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef void ( *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void ( *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLenum ( *PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef GLenum ( *PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
typedef GLhandleARB ( *PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void ( *PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void ( *PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint64 ( *PFNGLGETIMAGEHANDLEARBPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void ( *PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef void ( *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void ( *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void ( *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void ( *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void ( *PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
typedef void ( *PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
typedef void ( *PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint * params);
typedef void ( *PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble * v);
typedef void ( *PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat * v);
typedef void ( *PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint * v);
typedef void ( *PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint * params);
typedef void ( *PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void ( *PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void ( *PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64 * params);
typedef void ( *PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void ( *PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void ( *PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void ( *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void ( *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint * param);
typedef void ( *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void ( *PFNGLGETNAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string);
typedef void ( *PFNGLGETNAMEDSTRINGIVARBPROC)(GLint namelen, const GLchar * name, GLenum pname, GLint * params);
typedef void ( *PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void ( *PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint * params);
typedef void ( *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void ( *PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat * values);
typedef void ( *PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint * values);
typedef void ( *PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort * values);
typedef void ( *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void ( *PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte * mask);
typedef void ( *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void ( *PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void ( *PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void ( *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void ( *PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef void ( *PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void ( *PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void ( *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void ( *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef GLuint ( *PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint ( *PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint ( *PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef void ( *PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void ( *PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
typedef void ( *PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
typedef void ( *PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void * string);
typedef void ( *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void ( *PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void ( *PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void ( *PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void ( *PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void ( *PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef void ( *PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void ( *PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void ( *PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint * params);
typedef void ( *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void ( *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void ( *PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void ( *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void ( *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void ( *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void ( *PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void ( *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void ( *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void ( *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void ( *PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
typedef void ( *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef const GLubyte * ( *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * ( *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef GLuint ( *PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef GLint ( *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef void ( *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void ( *PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble * params);
typedef void ( *PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint * params);
typedef void ( *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void ( *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void ( *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void ( *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void ( *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint64 ( *PFNGLGETTEXTUREHANDLEARBPROC)(GLuint texture);
typedef void ( *PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void ( *PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint * params);
typedef void ( *PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef void ( *PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint * params);
typedef void ( *PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef GLuint64 ( *PFNGLGETTEXTURESAMPLERHANDLEARBPROC)(GLuint texture, GLuint sampler);
typedef void ( *PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void ( *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void ( *PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
typedef void ( *PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
typedef void ( *PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint * param);
typedef GLuint ( *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef void ( *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint ( *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint ( *PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void ( *PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint * params);
typedef void ( *PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble * params);
typedef void ( *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void ( *PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef void ( *PFNGLGETUNIFORMI64VARBPROC)(GLuint program, GLint location, GLint64 * params);
typedef void ( *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void ( *PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint * params);
typedef void ( *PFNGLGETUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLuint64 * params);
typedef void ( *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void ( *PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
typedef void ( *PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void ( *PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void ( *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void ( *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void ( *PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void ( *PFNGLGETVERTEXATTRIBLUI64VARBPROC)(GLuint index, GLenum pname, GLuint64EXT * params);
typedef void ( *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void ( *PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void ( *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void ( *PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void ( *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void ( *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void ( *PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint * params);
typedef void ( *PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void ( *PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void * img);
typedef void ( *PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void ( *PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void ( *PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void ( *PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void ( *PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void ( *PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void ( *PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat * values);
typedef void ( *PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint * values);
typedef void ( *PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort * values);
typedef void ( *PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte * pattern);
typedef void ( *PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void ( *PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img);
typedef void ( *PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void ( *PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void ( *PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void ( *PFNGLGETNUNIFORMI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint64 * params);
typedef void ( *PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void ( *PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void ( *PFNGLGETNUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params);
typedef void ( *PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void ( *PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void ( *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void ( *PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void ( *PFNGLINDEXMASKPROC)(GLuint mask);
typedef void ( *PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLINDEXDPROC)(GLdouble c);
typedef void ( *PFNGLINDEXDVPROC)(const GLdouble * c);
typedef void ( *PFNGLINDEXFPROC)(GLfloat c);
typedef void ( *PFNGLINDEXFVPROC)(const GLfloat * c);
typedef void ( *PFNGLINDEXIPROC)(GLint c);
typedef void ( *PFNGLINDEXIVPROC)(const GLint * c);
typedef void ( *PFNGLINDEXSPROC)(GLshort c);
typedef void ( *PFNGLINDEXSVPROC)(const GLshort * c);
typedef void ( *PFNGLINDEXUBPROC)(GLubyte c);
typedef void ( *PFNGLINDEXUBVPROC)(const GLubyte * c);
typedef void ( *PFNGLINITNAMESPROC)(void);
typedef void ( *PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void * pointer);
typedef void ( *PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
typedef void ( *PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void ( *PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void ( *PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
typedef void ( *PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
typedef void ( *PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef GLboolean ( *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean ( *PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean ( *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean ( *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean ( *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean ( *PFNGLISIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef GLboolean ( *PFNGLISLISTPROC)(GLuint list);
typedef GLboolean ( *PFNGLISNAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name);
typedef GLboolean ( *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean ( *PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean ( *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean ( *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean ( *PFNGLISQUERYARBPROC)(GLuint id);
typedef GLboolean ( *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean ( *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean ( *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean ( *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean ( *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean ( *PFNGLISTEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef GLboolean ( *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef GLboolean ( *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef void ( *PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void ( *PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat * params);
typedef void ( *PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void ( *PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint * params);
typedef void ( *PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void ( *PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat * params);
typedef void ( *PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void ( *PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint * params);
typedef void ( *PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void ( *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void ( *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void ( *PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void ( *PFNGLLISTBASEPROC)(GLuint base);
typedef void ( *PFNGLLOADIDENTITYPROC)(void);
typedef void ( *PFNGLLOADMATRIXDPROC)(const GLdouble * m);
typedef void ( *PFNGLLOADMATRIXFPROC)(const GLfloat * m);
typedef void ( *PFNGLLOADNAMEPROC)(GLuint name);
typedef void ( *PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void ( *PFNGLLOADTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void ( *PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void ( *PFNGLLOADTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void ( *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void ( *PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef void ( *PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle, GLenum access);
typedef void ( *PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef void ( *PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef void ( *PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void ( *PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void ( *PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void ( *PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void * ( *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * ( *PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void * ( *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void ( *PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void ( *PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void ( *PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void ( *PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void * ( *PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
typedef void * ( *PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void ( *PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void ( *PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat * params);
typedef void ( *PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void ( *PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint * params);
typedef void ( *PFNGLMATRIXINDEXPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLMATRIXINDEXUBVARBPROC)(GLint size, const GLubyte * indices);
typedef void ( *PFNGLMATRIXINDEXUIVARBPROC)(GLint size, const GLuint * indices);
typedef void ( *PFNGLMATRIXINDEXUSVARBPROC)(GLint size, const GLushort * indices);
typedef void ( *PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void ( *PFNGLMAXSHADERCOMPILERTHREADSARBPROC)(GLuint count);
typedef void ( *PFNGLMAXSHADERCOMPILERTHREADSKHRPROC)(GLuint count);
typedef void ( *PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void ( *PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void ( *PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void ( *PFNGLMINSAMPLESHADINGARBPROC)(GLfloat value);
typedef void ( *PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void ( *PFNGLMULTMATRIXDPROC)(const GLdouble * m);
typedef void ( *PFNGLMULTMATRIXFPROC)(const GLfloat * m);
typedef void ( *PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void ( *PFNGLMULTTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void ( *PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void ( *PFNGLMULTTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void ( *PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void ( *PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void ( *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void ( *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void ( *PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void ( *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void ( *PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void ( *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void ( *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void ( *PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void ( *PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void ( *PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void ( *PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void ( *PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void ( *PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void ( *PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void ( *PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void ( *PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void ( *PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void ( *PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void ( *PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void ( *PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void ( *PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void ( *PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void ( *PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void ( *PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void ( *PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void ( *PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void ( *PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void ( *PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void ( *PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void ( *PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void ( *PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void ( *PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void ( *PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void ( *PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble * v);
typedef void ( *PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void ( *PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void ( *PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat * v);
typedef void ( *PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void ( *PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void ( *PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint * v);
typedef void ( *PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void ( *PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void ( *PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort * v);
typedef void ( *PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void ( *PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void ( *PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void ( *PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void ( *PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void ( *PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void ( *PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void ( *PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void ( *PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void ( *PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void ( *PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void ( *PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void ( *PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void ( *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
typedef void ( *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void ( *PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void ( *PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
typedef void ( *PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void ( *PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void ( *PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void ( *PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void ( *PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( *PFNGLNAMEDSTRINGARBPROC)(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string);
typedef void ( *PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void ( *PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void ( *PFNGLNORMAL3BVPROC)(const GLbyte * v);
typedef void ( *PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void ( *PFNGLNORMAL3DVPROC)(const GLdouble * v);
typedef void ( *PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void ( *PFNGLNORMAL3FVPROC)(const GLfloat * v);
typedef void ( *PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void ( *PFNGLNORMAL3IVPROC)(const GLint * v);
typedef void ( *PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void ( *PFNGLNORMAL3SVPROC)(const GLshort * v);
typedef void ( *PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void ( *PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void ( *PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void ( *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void ( *PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void ( *PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void ( *PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat * values);
typedef void ( *PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void ( *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void ( *PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat * values);
typedef void ( *PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint * values);
typedef void ( *PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort * values);
typedef void ( *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void ( *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void ( *PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void ( *PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void ( *PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void ( *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void ( *PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
typedef void ( *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void ( *PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat * params);
typedef void ( *PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void ( *PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint * params);
typedef void ( *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void ( *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void ( *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void ( *PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void ( *PFNGLPOLYGONSTIPPLEPROC)(const GLubyte * mask);
typedef void ( *PFNGLPOPATTRIBPROC)(void);
typedef void ( *PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void ( *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void ( *PFNGLPOPMATRIXPROC)(void);
typedef void ( *PFNGLPOPNAMEPROC)(void);
typedef void ( *PFNGLPRIMITIVEBOUNDINGBOXPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void ( *PFNGLPRIMITIVEBOUNDINGBOXARBPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void ( *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void ( *PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
typedef void ( *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void ( *PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void ( *PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( *PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void ( *PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void ( *PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( *PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void ( *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void ( *PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
typedef void ( *PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void * string);
typedef void ( *PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void ( *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void ( *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void ( *PFNGLPROGRAMUNIFORM1I64ARBPROC)(GLuint program, GLint location, GLint64 x);
typedef void ( *PFNGLPROGRAMUNIFORM1I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void ( *PFNGLPROGRAMUNIFORM1UI64ARBPROC)(GLuint program, GLint location, GLuint64 x);
typedef void ( *PFNGLPROGRAMUNIFORM1UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void ( *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void ( *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void ( *PFNGLPROGRAMUNIFORM2I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void ( *PFNGLPROGRAMUNIFORM2I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void ( *PFNGLPROGRAMUNIFORM2UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void ( *PFNGLPROGRAMUNIFORM2UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void ( *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void ( *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void ( *PFNGLPROGRAMUNIFORM3I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void ( *PFNGLPROGRAMUNIFORM3I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void ( *PFNGLPROGRAMUNIFORM3UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void ( *PFNGLPROGRAMUNIFORM3UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void ( *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void ( *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void ( *PFNGLPROGRAMUNIFORM4I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void ( *PFNGLPROGRAMUNIFORM4I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void ( *PFNGLPROGRAMUNIFORM4UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void ( *PFNGLPROGRAMUNIFORM4UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)(GLuint program, GLint location, GLuint64 value);
typedef void ( *PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * values);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void ( *PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void ( *PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void ( *PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void ( *PFNGLPUSHMATRIXPROC)(void);
typedef void ( *PFNGLPUSHNAMEPROC)(GLuint name);
typedef void ( *PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void ( *PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void ( *PFNGLRASTERPOS2DVPROC)(const GLdouble * v);
typedef void ( *PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void ( *PFNGLRASTERPOS2FVPROC)(const GLfloat * v);
typedef void ( *PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void ( *PFNGLRASTERPOS2IVPROC)(const GLint * v);
typedef void ( *PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void ( *PFNGLRASTERPOS2SVPROC)(const GLshort * v);
typedef void ( *PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLRASTERPOS3DVPROC)(const GLdouble * v);
typedef void ( *PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLRASTERPOS3FVPROC)(const GLfloat * v);
typedef void ( *PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void ( *PFNGLRASTERPOS3IVPROC)(const GLint * v);
typedef void ( *PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void ( *PFNGLRASTERPOS3SVPROC)(const GLshort * v);
typedef void ( *PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLRASTERPOS4DVPROC)(const GLdouble * v);
typedef void ( *PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( *PFNGLRASTERPOS4FVPROC)(const GLfloat * v);
typedef void ( *PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void ( *PFNGLRASTERPOS4IVPROC)(const GLint * v);
typedef void ( *PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( *PFNGLRASTERPOS4SVPROC)(const GLshort * v);
typedef void ( *PFNGLREADBUFFERPROC)(GLenum src);
typedef void ( *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void ( *PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void ( *PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void ( *PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void ( *PFNGLRECTDVPROC)(const GLdouble * v1, const GLdouble * v2);
typedef void ( *PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void ( *PFNGLRECTFVPROC)(const GLfloat * v1, const GLfloat * v2);
typedef void ( *PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void ( *PFNGLRECTIVPROC)(const GLint * v1, const GLint * v2);
typedef void ( *PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void ( *PFNGLRECTSVPROC)(const GLshort * v1, const GLshort * v2);
typedef void ( *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef GLint ( *PFNGLRENDERMODEPROC)(GLenum mode);
typedef void ( *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( *PFNGLRESETHISTOGRAMPROC)(GLenum target);
typedef void ( *PFNGLRESETMINMAXPROC)(GLenum target);
typedef void ( *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void ( *PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void ( *PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
typedef void ( *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void ( *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void ( *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void ( *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void ( *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void ( *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void ( *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void ( *PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void ( *PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void ( *PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void ( *PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte * v);
typedef void ( *PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void ( *PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble * v);
typedef void ( *PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void ( *PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat * v);
typedef void ( *PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void ( *PFNGLSECONDARYCOLOR3IVPROC)(const GLint * v);
typedef void ( *PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void ( *PFNGLSECONDARYCOLOR3SVPROC)(const GLshort * v);
typedef void ( *PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void ( *PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte * v);
typedef void ( *PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void ( *PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint * v);
typedef void ( *PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void ( *PFNGLSECONDARYCOLOR3USVPROC)(const GLushort * v);
typedef void ( *PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void ( *PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void ( *PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint * buffer);
typedef void ( *PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
typedef void ( *PFNGLSHADEMODELPROC)(GLenum mode);
typedef void ( *PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
typedef void ( *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void ( *PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length);
typedef void ( *PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void ( *PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void ( *PFNGLSPECIALIZESHADERARBPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void ( *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void ( *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void ( *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void ( *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void ( *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void ( *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void ( *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void ( *PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void ( *PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( *PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void ( *PFNGLTEXCOORD1DVPROC)(const GLdouble * v);
typedef void ( *PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void ( *PFNGLTEXCOORD1FVPROC)(const GLfloat * v);
typedef void ( *PFNGLTEXCOORD1IPROC)(GLint s);
typedef void ( *PFNGLTEXCOORD1IVPROC)(const GLint * v);
typedef void ( *PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void ( *PFNGLTEXCOORD1SVPROC)(const GLshort * v);
typedef void ( *PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void ( *PFNGLTEXCOORD2DVPROC)(const GLdouble * v);
typedef void ( *PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void ( *PFNGLTEXCOORD2FVPROC)(const GLfloat * v);
typedef void ( *PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void ( *PFNGLTEXCOORD2IVPROC)(const GLint * v);
typedef void ( *PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void ( *PFNGLTEXCOORD2SVPROC)(const GLshort * v);
typedef void ( *PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void ( *PFNGLTEXCOORD3DVPROC)(const GLdouble * v);
typedef void ( *PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void ( *PFNGLTEXCOORD3FVPROC)(const GLfloat * v);
typedef void ( *PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void ( *PFNGLTEXCOORD3IVPROC)(const GLint * v);
typedef void ( *PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void ( *PFNGLTEXCOORD3SVPROC)(const GLshort * v);
typedef void ( *PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void ( *PFNGLTEXCOORD4DVPROC)(const GLdouble * v);
typedef void ( *PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void ( *PFNGLTEXCOORD4FVPROC)(const GLfloat * v);
typedef void ( *PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void ( *PFNGLTEXCOORD4IVPROC)(const GLint * v);
typedef void ( *PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void ( *PFNGLTEXCOORD4SVPROC)(const GLshort * v);
typedef void ( *PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void ( *PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint * coords);
typedef void ( *PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void ( *PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint * coords);
typedef void ( *PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void ( *PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void ( *PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void ( *PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint * coords);
typedef void ( *PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void ( *PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void ( *PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void ( *PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void ( *PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void ( *PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble * params);
typedef void ( *PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void ( *PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat * params);
typedef void ( *PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void ( *PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint * params);
typedef void ( *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void ( *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void ( *PFNGLTEXPAGECOMMITMENTARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void ( *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void ( *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void ( *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void ( *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void ( *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void ( *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void ( *PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void ( *PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void ( *PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void ( *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void ( *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXTUREBARRIERPROC)(void);
typedef void ( *PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void ( *PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( *PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint * params);
typedef void ( *PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint * params);
typedef void ( *PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
typedef void ( *PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat * param);
typedef void ( *PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
typedef void ( *PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint * param);
typedef void ( *PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void ( *PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( *PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void ( *PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void ( *PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void ( *PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void ( *PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void ( *PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
typedef void ( *PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void ( *PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef void ( *PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void ( *PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void ( *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void ( *PFNGLUNIFORM1I64ARBPROC)(GLint location, GLint64 x);
typedef void ( *PFNGLUNIFORM1I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void ( *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void ( *PFNGLUNIFORM1UI64ARBPROC)(GLint location, GLuint64 x);
typedef void ( *PFNGLUNIFORM1UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void ( *PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void ( *PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void ( *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void ( *PFNGLUNIFORM2I64ARBPROC)(GLint location, GLint64 x, GLint64 y);
typedef void ( *PFNGLUNIFORM2I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void ( *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void ( *PFNGLUNIFORM2UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y);
typedef void ( *PFNGLUNIFORM2UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void ( *PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void ( *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void ( *PFNGLUNIFORM3I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void ( *PFNGLUNIFORM3I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void ( *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void ( *PFNGLUNIFORM3UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void ( *PFNGLUNIFORM3UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void ( *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void ( *PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void ( *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void ( *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void ( *PFNGLUNIFORM4I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void ( *PFNGLUNIFORM4I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void ( *PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void ( *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void ( *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void ( *PFNGLUNIFORM4UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void ( *PFNGLUNIFORM4UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void ( *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void ( *PFNGLUNIFORMHANDLEUI64ARBPROC)(GLint location, GLuint64 value);
typedef void ( *PFNGLUNIFORMHANDLEUI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void ( *PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void ( *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void ( *PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint * indices);
typedef GLboolean ( *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef GLboolean ( *PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef GLboolean ( *PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
typedef void ( *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void ( *PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void ( *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void ( *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void ( *PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef void ( *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void ( *PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void ( *PFNGLVERTEX2DVPROC)(const GLdouble * v);
typedef void ( *PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void ( *PFNGLVERTEX2FVPROC)(const GLfloat * v);
typedef void ( *PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void ( *PFNGLVERTEX2IVPROC)(const GLint * v);
typedef void ( *PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void ( *PFNGLVERTEX2SVPROC)(const GLshort * v);
typedef void ( *PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLVERTEX3DVPROC)(const GLdouble * v);
typedef void ( *PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLVERTEX3FVPROC)(const GLfloat * v);
typedef void ( *PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void ( *PFNGLVERTEX3IVPROC)(const GLint * v);
typedef void ( *PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void ( *PFNGLVERTEX3SVPROC)(const GLshort * v);
typedef void ( *PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLVERTEX4DVPROC)(const GLdouble * v);
typedef void ( *PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( *PFNGLVERTEX4FVPROC)(const GLfloat * v);
typedef void ( *PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void ( *PFNGLVERTEX4IVPROC)(const GLint * v);
typedef void ( *PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( *PFNGLVERTEX4SVPROC)(const GLshort * v);
typedef void ( *PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void ( *PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void ( *PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( *PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( *PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void ( *PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
typedef void ( *PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void ( *PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void ( *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void ( *PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void ( *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void ( *PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void ( *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void ( *PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void ( *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void ( *PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void ( *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void ( *PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void ( *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void ( *PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void ( *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void ( *PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void ( *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void ( *PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte * v);
typedef void ( *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void ( *PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void ( *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void ( *PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte * v);
typedef void ( *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void ( *PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort * v);
typedef void ( *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void ( *PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte * v);
typedef void ( *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( *PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( *PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void ( *PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte * v);
typedef void ( *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void ( *PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort * v);
typedef void ( *PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void ( *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void ( *PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
typedef void ( *PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void ( *PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void ( *PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void ( *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void ( *PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void ( *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void ( *PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void ( *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte * v);
typedef void ( *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void ( *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void ( *PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort * v);
typedef void ( *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte * v);
typedef void ( *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void ( *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void ( *PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort * v);
typedef void ( *PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void ( *PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIBL1UI64ARBPROC)(GLuint index, GLuint64EXT x);
typedef void ( *PFNGLVERTEXATTRIBL1UI64VARBPROC)(GLuint index, const GLuint64EXT * v);
typedef void ( *PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void ( *PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( *PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble * v);
typedef void ( *PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( *PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void ( *PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void ( *PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void ( *PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void ( *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void ( *PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void ( *PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
typedef void ( *PFNGLVERTEXBLENDARBPROC)(GLint count);
typedef void ( *PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void ( *PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint * value);
typedef void ( *PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void ( *PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint * value);
typedef void ( *PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void ( *PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint * value);
typedef void ( *PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void ( *PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void ( *PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat * v);
typedef void ( *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void ( *PFNGLWEIGHTPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void ( *PFNGLWEIGHTBVARBPROC)(GLint size, const GLbyte * weights);
typedef void ( *PFNGLWEIGHTDVARBPROC)(GLint size, const GLdouble * weights);
typedef void ( *PFNGLWEIGHTFVARBPROC)(GLint size, const GLfloat * weights);
typedef void ( *PFNGLWEIGHTIVARBPROC)(GLint size, const GLint * weights);
typedef void ( *PFNGLWEIGHTSVARBPROC)(GLint size, const GLshort * weights);
typedef void ( *PFNGLWEIGHTUBVARBPROC)(GLint size, const GLubyte * weights);
typedef void ( *PFNGLWEIGHTUIVARBPROC)(GLint size, const GLuint * weights);
typedef void ( *PFNGLWEIGHTUSVARBPROC)(GLint size, const GLushort * weights);
typedef void ( *PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void ( *PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
typedef void ( *PFNGLWINDOWPOS2DVPROC)(const GLdouble * v);
typedef void ( *PFNGLWINDOWPOS2DVARBPROC)(const GLdouble * v);
typedef void ( *PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void ( *PFNGLWINDOWPOS2FARBPROC)(GLfloat x, GLfloat y);
typedef void ( *PFNGLWINDOWPOS2FVPROC)(const GLfloat * v);
typedef void ( *PFNGLWINDOWPOS2FVARBPROC)(const GLfloat * v);
typedef void ( *PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void ( *PFNGLWINDOWPOS2IARBPROC)(GLint x, GLint y);
typedef void ( *PFNGLWINDOWPOS2IVPROC)(const GLint * v);
typedef void ( *PFNGLWINDOWPOS2IVARBPROC)(const GLint * v);
typedef void ( *PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void ( *PFNGLWINDOWPOS2SARBPROC)(GLshort x, GLshort y);
typedef void ( *PFNGLWINDOWPOS2SVPROC)(const GLshort * v);
typedef void ( *PFNGLWINDOWPOS2SVARBPROC)(const GLshort * v);
typedef void ( *PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLWINDOWPOS3DARBPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void ( *PFNGLWINDOWPOS3DVPROC)(const GLdouble * v);
typedef void ( *PFNGLWINDOWPOS3DVARBPROC)(const GLdouble * v);
typedef void ( *PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLWINDOWPOS3FARBPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void ( *PFNGLWINDOWPOS3FVPROC)(const GLfloat * v);
typedef void ( *PFNGLWINDOWPOS3FVARBPROC)(const GLfloat * v);
typedef void ( *PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void ( *PFNGLWINDOWPOS3IARBPROC)(GLint x, GLint y, GLint z);
typedef void ( *PFNGLWINDOWPOS3IVPROC)(const GLint * v);
typedef void ( *PFNGLWINDOWPOS3IVARBPROC)(const GLint * v);
typedef void ( *PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void ( *PFNGLWINDOWPOS3SARBPROC)(GLshort x, GLshort y, GLshort z);
typedef void ( *PFNGLWINDOWPOS3SVPROC)(const GLshort * v);
typedef void ( *PFNGLWINDOWPOS3SVARBPROC)(const GLshort * v);
extern PFNGLACCUMPROC glad_glAccum;
extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
extern PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB;
extern PFNGLALPHAFUNCPROC glad_glAlphaFunc;
extern PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
extern PFNGLARRAYELEMENTPROC glad_glArrayElement;
extern PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB;
extern PFNGLATTACHSHADERPROC glad_glAttachShader;
extern PFNGLBEGINPROC glad_glBegin;
extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
extern PFNGLBEGINQUERYPROC glad_glBeginQuery;
extern PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB;
extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
extern PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB;
extern PFNGLBINDBUFFERPROC glad_glBindBuffer;
extern PFNGLBINDBUFFERARBPROC glad_glBindBufferARB;
extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
extern PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;
extern PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;
extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
extern PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;
extern PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;
extern PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB;
extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
extern PFNGLBINDSAMPLERPROC glad_glBindSampler;
extern PFNGLBINDSAMPLERSPROC glad_glBindSamplers;
extern PFNGLBINDTEXTUREPROC glad_glBindTexture;
extern PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;
extern PFNGLBINDTEXTURESPROC glad_glBindTextures;
extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
extern PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;
extern PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;
extern PFNGLBITMAPPROC glad_glBitmap;
extern PFNGLBLENDBARRIERPROC glad_glBlendBarrier;
extern PFNGLBLENDBARRIERKHRPROC glad_glBlendBarrierKHR;
extern PFNGLBLENDCOLORPROC glad_glBlendColor;
extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB;
extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
extern PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB;
extern PFNGLBLENDFUNCPROC glad_glBlendFunc;
extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
extern PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB;
extern PFNGLBLENDFUNCIPROC glad_glBlendFunci;
extern PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB;
extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;
extern PFNGLBUFFERDATAPROC glad_glBufferData;
extern PFNGLBUFFERDATAARBPROC glad_glBufferDataARB;
extern PFNGLBUFFERPAGECOMMITMENTARBPROC glad_glBufferPageCommitmentARB;
extern PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;
extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
extern PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB;
extern PFNGLCALLLISTPROC glad_glCallList;
extern PFNGLCALLLISTSPROC glad_glCallLists;
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;
extern PFNGLCLAMPCOLORPROC glad_glClampColor;
extern PFNGLCLAMPCOLORARBPROC glad_glClampColorARB;
extern PFNGLCLEARPROC glad_glClear;
extern PFNGLCLEARACCUMPROC glad_glClearAccum;
extern PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;
extern PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;
extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
extern PFNGLCLEARCOLORPROC glad_glClearColor;
extern PFNGLCLEARDEPTHPROC glad_glClearDepth;
extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
extern PFNGLCLEARINDEXPROC glad_glClearIndex;
extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;
extern PFNGLCLEARSTENCILPROC glad_glClearStencil;
extern PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;
extern PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;
extern PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;
extern PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB;
extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
extern PFNGLCLIPCONTROLPROC glad_glClipControl;
extern PFNGLCLIPPLANEPROC glad_glClipPlane;
extern PFNGLCOLOR3BPROC glad_glColor3b;
extern PFNGLCOLOR3BVPROC glad_glColor3bv;
extern PFNGLCOLOR3DPROC glad_glColor3d;
extern PFNGLCOLOR3DVPROC glad_glColor3dv;
extern PFNGLCOLOR3FPROC glad_glColor3f;
extern PFNGLCOLOR3FVPROC glad_glColor3fv;
extern PFNGLCOLOR3IPROC glad_glColor3i;
extern PFNGLCOLOR3IVPROC glad_glColor3iv;
extern PFNGLCOLOR3SPROC glad_glColor3s;
extern PFNGLCOLOR3SVPROC glad_glColor3sv;
extern PFNGLCOLOR3UBPROC glad_glColor3ub;
extern PFNGLCOLOR3UBVPROC glad_glColor3ubv;
extern PFNGLCOLOR3UIPROC glad_glColor3ui;
extern PFNGLCOLOR3UIVPROC glad_glColor3uiv;
extern PFNGLCOLOR3USPROC glad_glColor3us;
extern PFNGLCOLOR3USVPROC glad_glColor3usv;
extern PFNGLCOLOR4BPROC glad_glColor4b;
extern PFNGLCOLOR4BVPROC glad_glColor4bv;
extern PFNGLCOLOR4DPROC glad_glColor4d;
extern PFNGLCOLOR4DVPROC glad_glColor4dv;
extern PFNGLCOLOR4FPROC glad_glColor4f;
extern PFNGLCOLOR4FVPROC glad_glColor4fv;
extern PFNGLCOLOR4IPROC glad_glColor4i;
extern PFNGLCOLOR4IVPROC glad_glColor4iv;
extern PFNGLCOLOR4SPROC glad_glColor4s;
extern PFNGLCOLOR4SVPROC glad_glColor4sv;
extern PFNGLCOLOR4UBPROC glad_glColor4ub;
extern PFNGLCOLOR4UBVPROC glad_glColor4ubv;
extern PFNGLCOLOR4UIPROC glad_glColor4ui;
extern PFNGLCOLOR4UIVPROC glad_glColor4uiv;
extern PFNGLCOLOR4USPROC glad_glColor4us;
extern PFNGLCOLOR4USVPROC glad_glColor4usv;
extern PFNGLCOLORMASKPROC glad_glColorMask;
extern PFNGLCOLORMASKIPROC glad_glColorMaski;
extern PFNGLCOLORMATERIALPROC glad_glColorMaterial;
extern PFNGLCOLORP3UIPROC glad_glColorP3ui;
extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
extern PFNGLCOLORP4UIPROC glad_glColorP4ui;
extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
extern PFNGLCOLORPOINTERPROC glad_glColorPointer;
extern PFNGLCOLORSUBTABLEPROC glad_glColorSubTable;
extern PFNGLCOLORTABLEPROC glad_glColorTable;
extern PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv;
extern PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv;
extern PFNGLCOMPILESHADERPROC glad_glCompileShader;
extern PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB;
extern PFNGLCOMPILESHADERINCLUDEARBPROC glad_glCompileShaderIncludeARB;
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB;
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB;
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;
extern PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D;
extern PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D;
extern PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf;
extern PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv;
extern PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri;
extern PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv;
extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
extern PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable;
extern PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable;
extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D;
extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D;
extern PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;
extern PFNGLCOPYPIXELSPROC glad_glCopyPixels;
extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;
extern PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;
extern PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;
extern PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
extern PFNGLCREATEPROGRAMOBJECTARBPROC glad_glCreateProgramObjectARB;
extern PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;
extern PFNGLCREATEQUERIESPROC glad_glCreateQueries;
extern PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;
extern PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;
extern PFNGLCREATESHADERPROC glad_glCreateShader;
extern PFNGLCREATESHADEROBJECTARBPROC glad_glCreateShaderObjectARB;
extern PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
extern PFNGLCREATESYNCFROMCLEVENTARBPROC glad_glCreateSyncFromCLeventARB;
extern PFNGLCREATETEXTURESPROC glad_glCreateTextures;
extern PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;
extern PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;
extern PFNGLCULLFACEPROC glad_glCullFace;
extern PFNGLCURRENTPALETTEMATRIXARBPROC glad_glCurrentPaletteMatrixARB;
extern PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;
extern PFNGLDEBUGMESSAGECALLBACKARBPROC glad_glDebugMessageCallbackARB;
extern PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;
extern PFNGLDEBUGMESSAGECONTROLARBPROC glad_glDebugMessageControlARB;
extern PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;
extern PFNGLDEBUGMESSAGEINSERTARBPROC glad_glDebugMessageInsertARB;
extern PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
extern PFNGLDELETEBUFFERSARBPROC glad_glDeleteBuffersARB;
extern PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
extern PFNGLDELETELISTSPROC glad_glDeleteLists;
extern PFNGLDELETENAMEDSTRINGARBPROC glad_glDeleteNamedStringARB;
extern PFNGLDELETEOBJECTARBPROC glad_glDeleteObjectARB;
extern PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
extern PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
extern PFNGLDELETEPROGRAMSARBPROC glad_glDeleteProgramsARB;
extern PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
extern PFNGLDELETEQUERIESARBPROC glad_glDeleteQueriesARB;
extern PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
extern PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
extern PFNGLDELETESHADERPROC glad_glDeleteShader;
extern PFNGLDELETESYNCPROC glad_glDeleteSync;
extern PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
extern PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
extern PFNGLDEPTHFUNCPROC glad_glDepthFunc;
extern PFNGLDEPTHMASKPROC glad_glDepthMask;
extern PFNGLDEPTHRANGEPROC glad_glDepthRange;
extern PFNGLDEPTHRANGEARRAYDVNVPROC glad_glDepthRangeArraydvNV;
extern PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
extern PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
extern PFNGLDEPTHRANGEINDEXEDDNVPROC glad_glDepthRangeIndexeddNV;
extern PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
extern PFNGLDETACHOBJECTARBPROC glad_glDetachObjectARB;
extern PFNGLDETACHSHADERPROC glad_glDetachShader;
extern PFNGLDISABLEPROC glad_glDisable;
extern PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
extern PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_glDisableVertexAttribArrayARB;
extern PFNGLDISABLEIPROC glad_glDisablei;
extern PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;
extern PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glad_glDispatchComputeGroupSizeARB;
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;
extern PFNGLDRAWARRAYSPROC glad_glDrawArrays;
extern PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
extern PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
extern PFNGLDRAWARRAYSINSTANCEDARBPROC glad_glDrawArraysInstancedARB;
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;
extern PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
extern PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
extern PFNGLDRAWBUFFERSARBPROC glad_glDrawBuffersARB;
extern PFNGLDRAWELEMENTSPROC glad_glDrawElements;
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
extern PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
extern PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
extern PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_glDrawElementsInstancedARB;
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;
extern PFNGLDRAWPIXELSPROC glad_glDrawPixels;
extern PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;
extern PFNGLEDGEFLAGPROC glad_glEdgeFlag;
extern PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
extern PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
extern PFNGLENABLEPROC glad_glEnable;
extern PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
extern PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
extern PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_glEnableVertexAttribArrayARB;
extern PFNGLENABLEIPROC glad_glEnablei;
extern PFNGLENDPROC glad_glEnd;
extern PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
extern PFNGLENDLISTPROC glad_glEndList;
extern PFNGLENDQUERYPROC glad_glEndQuery;
extern PFNGLENDQUERYARBPROC glad_glEndQueryARB;
extern PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
extern PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
extern PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
extern PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
extern PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
extern PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
extern PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
extern PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
extern PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
extern PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
extern PFNGLEVALMESH1PROC glad_glEvalMesh1;
extern PFNGLEVALMESH2PROC glad_glEvalMesh2;
extern PFNGLEVALPOINT1PROC glad_glEvalPoint1;
extern PFNGLEVALPOINT2PROC glad_glEvalPoint2;
extern PFNGLEVALUATEDEPTHVALUESARBPROC glad_glEvaluateDepthValuesARB;
extern PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
extern PFNGLFENCESYNCPROC glad_glFenceSync;
extern PFNGLFINISHPROC glad_glFinish;
extern PFNGLFLUSHPROC glad_glFlush;
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;
extern PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;
extern PFNGLFOGCOORDDPROC glad_glFogCoordd;
extern PFNGLFOGCOORDDVPROC glad_glFogCoorddv;
extern PFNGLFOGCOORDFPROC glad_glFogCoordf;
extern PFNGLFOGCOORDFVPROC glad_glFogCoordfv;
extern PFNGLFOGFPROC glad_glFogf;
extern PFNGLFOGFVPROC glad_glFogfv;
extern PFNGLFOGIPROC glad_glFogi;
extern PFNGLFOGIVPROC glad_glFogiv;
extern PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glFramebufferSampleLocationsfvARB;
extern PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
extern PFNGLFRAMEBUFFERTEXTUREARBPROC glad_glFramebufferTextureARB;
extern PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_glFramebufferTextureFaceARB;
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
extern PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_glFramebufferTextureLayerARB;
extern PFNGLFRONTFACEPROC glad_glFrontFace;
extern PFNGLFRUSTUMPROC glad_glFrustum;
extern PFNGLGENBUFFERSPROC glad_glGenBuffers;
extern PFNGLGENBUFFERSARBPROC glad_glGenBuffersARB;
extern PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
extern PFNGLGENLISTSPROC glad_glGenLists;
extern PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
extern PFNGLGENPROGRAMSARBPROC glad_glGenProgramsARB;
extern PFNGLGENQUERIESPROC glad_glGenQueries;
extern PFNGLGENQUERIESARBPROC glad_glGenQueriesARB;
extern PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
extern PFNGLGENSAMPLERSPROC glad_glGenSamplers;
extern PFNGLGENTEXTURESPROC glad_glGenTextures;
extern PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
extern PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
extern PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
extern PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;
extern PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
extern PFNGLGETACTIVEATTRIBARBPROC glad_glGetActiveAttribARB;
extern PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
extern PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
extern PFNGLGETACTIVEUNIFORMARBPROC glad_glGetActiveUniformARB;
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
extern PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
extern PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
extern PFNGLGETATTACHEDOBJECTSARBPROC glad_glGetAttachedObjectsARB;
extern PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
extern PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
extern PFNGLGETATTRIBLOCATIONARBPROC glad_glGetAttribLocationARB;
extern PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
extern PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
extern PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
extern PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
extern PFNGLGETBUFFERPARAMETERIVARBPROC glad_glGetBufferParameterivARB;
extern PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
extern PFNGLGETBUFFERPOINTERVARBPROC glad_glGetBufferPointervARB;
extern PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
extern PFNGLGETBUFFERSUBDATAARBPROC glad_glGetBufferSubDataARB;
extern PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
extern PFNGLGETCOLORTABLEPROC glad_glGetColorTable;
extern PFNGLGETCOLORTABLEPARAMETERFVPROC glad_glGetColorTableParameterfv;
extern PFNGLGETCOLORTABLEPARAMETERIVPROC glad_glGetColorTableParameteriv;
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
extern PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_glGetCompressedTexImageARB;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;
extern PFNGLGETCONVOLUTIONFILTERPROC glad_glGetConvolutionFilter;
extern PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_glGetConvolutionParameterfv;
extern PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_glGetConvolutionParameteriv;
extern PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;
extern PFNGLGETDEBUGMESSAGELOGARBPROC glad_glGetDebugMessageLogARB;
extern PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
extern PFNGLGETDOUBLEVPROC glad_glGetDoublev;
extern PFNGLGETERRORPROC glad_glGetError;
extern PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
extern PFNGLGETFLOATVPROC glad_glGetFloatv;
extern PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
extern PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;
extern PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;
extern PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;
extern PFNGLGETHANDLEARBPROC glad_glGetHandleARB;
extern PFNGLGETHISTOGRAMPROC glad_glGetHistogram;
extern PFNGLGETHISTOGRAMPARAMETERFVPROC glad_glGetHistogramParameterfv;
extern PFNGLGETHISTOGRAMPARAMETERIVPROC glad_glGetHistogramParameteriv;
extern PFNGLGETIMAGEHANDLEARBPROC glad_glGetImageHandleARB;
extern PFNGLGETINFOLOGARBPROC glad_glGetInfoLogARB;
extern PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
extern PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
extern PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
extern PFNGLGETINTEGERVPROC glad_glGetIntegerv;
extern PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;
extern PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;
extern PFNGLGETLIGHTFVPROC glad_glGetLightfv;
extern PFNGLGETLIGHTIVPROC glad_glGetLightiv;
extern PFNGLGETMAPDVPROC glad_glGetMapdv;
extern PFNGLGETMAPFVPROC glad_glGetMapfv;
extern PFNGLGETMAPIVPROC glad_glGetMapiv;
extern PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
extern PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
extern PFNGLGETMINMAXPROC glad_glGetMinmax;
extern PFNGLGETMINMAXPARAMETERFVPROC glad_glGetMinmaxParameterfv;
extern PFNGLGETMINMAXPARAMETERIVPROC glad_glGetMinmaxParameteriv;
extern PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;
extern PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;
extern PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;
extern PFNGLGETNAMEDSTRINGARBPROC glad_glGetNamedStringARB;
extern PFNGLGETNAMEDSTRINGIVARBPROC glad_glGetNamedStringivARB;
extern PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;
extern PFNGLGETOBJECTPARAMETERFVARBPROC glad_glGetObjectParameterfvARB;
extern PFNGLGETOBJECTPARAMETERIVARBPROC glad_glGetObjectParameterivARB;
extern PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;
extern PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
extern PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
extern PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
extern PFNGLGETPOINTERVPROC glad_glGetPointerv;
extern PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
extern PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
extern PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_glGetProgramEnvParameterdvARB;
extern PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_glGetProgramEnvParameterfvARB;
extern PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
extern PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;
extern PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_glGetProgramLocalParameterdvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_glGetProgramLocalParameterfvARB;
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
extern PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
extern PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;
extern PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;
extern PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;
extern PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
extern PFNGLGETPROGRAMSTRINGARBPROC glad_glGetProgramStringARB;
extern PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
extern PFNGLGETPROGRAMIVARBPROC glad_glGetProgramivARB;
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;
extern PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;
extern PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
extern PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
extern PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
extern PFNGLGETQUERYOBJECTIVARBPROC glad_glGetQueryObjectivARB;
extern PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
extern PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
extern PFNGLGETQUERYOBJECTUIVARBPROC glad_glGetQueryObjectuivARB;
extern PFNGLGETQUERYIVPROC glad_glGetQueryiv;
extern PFNGLGETQUERYIVARBPROC glad_glGetQueryivARB;
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
extern PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
extern PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
extern PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
extern PFNGLGETSEPARABLEFILTERPROC glad_glGetSeparableFilter;
extern PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
extern PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
extern PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
extern PFNGLGETSHADERSOURCEARBPROC glad_glGetShaderSourceARB;
extern PFNGLGETSHADERIVPROC glad_glGetShaderiv;
extern PFNGLGETSTRINGPROC glad_glGetString;
extern PFNGLGETSTRINGIPROC glad_glGetStringi;
extern PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
extern PFNGLGETSYNCIVPROC glad_glGetSynciv;
extern PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
extern PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
extern PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
extern PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
extern PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
extern PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
extern PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
extern PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
extern PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
extern PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
extern PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
extern PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
extern PFNGLGETTEXTUREHANDLEARBPROC glad_glGetTextureHandleARB;
extern PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;
extern PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;
extern PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;
extern PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;
extern PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;
extern PFNGLGETTEXTURESAMPLERHANDLEARBPROC glad_glGetTextureSamplerHandleARB;
extern PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;
extern PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;
extern PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
extern PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
extern PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
extern PFNGLGETUNIFORMLOCATIONARBPROC glad_glGetUniformLocationARB;
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
extern PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
extern PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
extern PFNGLGETUNIFORMFVARBPROC glad_glGetUniformfvARB;
extern PFNGLGETUNIFORMI64VARBPROC glad_glGetUniformi64vARB;
extern PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
extern PFNGLGETUNIFORMIVARBPROC glad_glGetUniformivARB;
extern PFNGLGETUNIFORMUI64VARBPROC glad_glGetUniformui64vARB;
extern PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;
extern PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;
extern PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
extern PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
extern PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
extern PFNGLGETVERTEXATTRIBLUI64VARBPROC glad_glGetVertexAttribLui64vARB;
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
extern PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_glGetVertexAttribPointervARB;
extern PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
extern PFNGLGETVERTEXATTRIBDVARBPROC glad_glGetVertexAttribdvARB;
extern PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
extern PFNGLGETVERTEXATTRIBFVARBPROC glad_glGetVertexAttribfvARB;
extern PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
extern PFNGLGETVERTEXATTRIBIVARBPROC glad_glGetVertexAttribivARB;
extern PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB;
extern PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;
extern PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB;
extern PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB;
extern PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB;
extern PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB;
extern PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB;
extern PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB;
extern PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB;
extern PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB;
extern PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB;
extern PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB;
extern PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB;
extern PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;
extern PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;
extern PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;
extern PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;
extern PFNGLGETNUNIFORMI64VARBPROC glad_glGetnUniformi64vARB;
extern PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;
extern PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;
extern PFNGLGETNUNIFORMUI64VARBPROC glad_glGetnUniformui64vARB;
extern PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;
extern PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;
extern PFNGLHINTPROC glad_glHint;
extern PFNGLHISTOGRAMPROC glad_glHistogram;
extern PFNGLINDEXMASKPROC glad_glIndexMask;
extern PFNGLINDEXPOINTERPROC glad_glIndexPointer;
extern PFNGLINDEXDPROC glad_glIndexd;
extern PFNGLINDEXDVPROC glad_glIndexdv;
extern PFNGLINDEXFPROC glad_glIndexf;
extern PFNGLINDEXFVPROC glad_glIndexfv;
extern PFNGLINDEXIPROC glad_glIndexi;
extern PFNGLINDEXIVPROC glad_glIndexiv;
extern PFNGLINDEXSPROC glad_glIndexs;
extern PFNGLINDEXSVPROC glad_glIndexsv;
extern PFNGLINDEXUBPROC glad_glIndexub;
extern PFNGLINDEXUBVPROC glad_glIndexubv;
extern PFNGLINITNAMESPROC glad_glInitNames;
extern PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
extern PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;
extern PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;
extern PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;
extern PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;
extern PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;
extern PFNGLISBUFFERPROC glad_glIsBuffer;
extern PFNGLISBUFFERARBPROC glad_glIsBufferARB;
extern PFNGLISENABLEDPROC glad_glIsEnabled;
extern PFNGLISENABLEDIPROC glad_glIsEnabledi;
extern PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
extern PFNGLISIMAGEHANDLERESIDENTARBPROC glad_glIsImageHandleResidentARB;
extern PFNGLISLISTPROC glad_glIsList;
extern PFNGLISNAMEDSTRINGARBPROC glad_glIsNamedStringARB;
extern PFNGLISPROGRAMPROC glad_glIsProgram;
extern PFNGLISPROGRAMARBPROC glad_glIsProgramARB;
extern PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
extern PFNGLISQUERYPROC glad_glIsQuery;
extern PFNGLISQUERYARBPROC glad_glIsQueryARB;
extern PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
extern PFNGLISSAMPLERPROC glad_glIsSampler;
extern PFNGLISSHADERPROC glad_glIsShader;
extern PFNGLISSYNCPROC glad_glIsSync;
extern PFNGLISTEXTUREPROC glad_glIsTexture;
extern PFNGLISTEXTUREHANDLERESIDENTARBPROC glad_glIsTextureHandleResidentARB;
extern PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
extern PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
extern PFNGLLIGHTMODELFPROC glad_glLightModelf;
extern PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
extern PFNGLLIGHTMODELIPROC glad_glLightModeli;
extern PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
extern PFNGLLIGHTFPROC glad_glLightf;
extern PFNGLLIGHTFVPROC glad_glLightfv;
extern PFNGLLIGHTIPROC glad_glLighti;
extern PFNGLLIGHTIVPROC glad_glLightiv;
extern PFNGLLINESTIPPLEPROC glad_glLineStipple;
extern PFNGLLINEWIDTHPROC glad_glLineWidth;
extern PFNGLLINKPROGRAMPROC glad_glLinkProgram;
extern PFNGLLINKPROGRAMARBPROC glad_glLinkProgramARB;
extern PFNGLLISTBASEPROC glad_glListBase;
extern PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
extern PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
extern PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
extern PFNGLLOADNAMEPROC glad_glLoadName;
extern PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;
extern PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_glLoadTransposeMatrixdARB;
extern PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;
extern PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_glLoadTransposeMatrixfARB;
extern PFNGLLOGICOPPROC glad_glLogicOp;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glad_glMakeImageHandleNonResidentARB;
extern PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glad_glMakeImageHandleResidentARB;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glad_glMakeTextureHandleNonResidentARB;
extern PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glad_glMakeTextureHandleResidentARB;
extern PFNGLMAP1DPROC glad_glMap1d;
extern PFNGLMAP1FPROC glad_glMap1f;
extern PFNGLMAP2DPROC glad_glMap2d;
extern PFNGLMAP2FPROC glad_glMap2f;
extern PFNGLMAPBUFFERPROC glad_glMapBuffer;
extern PFNGLMAPBUFFERARBPROC glad_glMapBufferARB;
extern PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
extern PFNGLMAPGRID1DPROC glad_glMapGrid1d;
extern PFNGLMAPGRID1FPROC glad_glMapGrid1f;
extern PFNGLMAPGRID2DPROC glad_glMapGrid2d;
extern PFNGLMAPGRID2FPROC glad_glMapGrid2f;
extern PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;
extern PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;
extern PFNGLMATERIALFPROC glad_glMaterialf;
extern PFNGLMATERIALFVPROC glad_glMaterialfv;
extern PFNGLMATERIALIPROC glad_glMateriali;
extern PFNGLMATERIALIVPROC glad_glMaterialiv;
extern PFNGLMATRIXINDEXPOINTERARBPROC glad_glMatrixIndexPointerARB;
extern PFNGLMATRIXINDEXUBVARBPROC glad_glMatrixIndexubvARB;
extern PFNGLMATRIXINDEXUIVARBPROC glad_glMatrixIndexuivARB;
extern PFNGLMATRIXINDEXUSVARBPROC glad_glMatrixIndexusvARB;
extern PFNGLMATRIXMODEPROC glad_glMatrixMode;
extern PFNGLMAXSHADERCOMPILERTHREADSARBPROC glad_glMaxShaderCompilerThreadsARB;
extern PFNGLMAXSHADERCOMPILERTHREADSKHRPROC glad_glMaxShaderCompilerThreadsKHR;
extern PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;
extern PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;
extern PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
extern PFNGLMINSAMPLESHADINGARBPROC glad_glMinSampleShadingARB;
extern PFNGLMINMAXPROC glad_glMinmax;
extern PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
extern PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
extern PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;
extern PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_glMultTransposeMatrixdARB;
extern PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;
extern PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_glMultTransposeMatrixfARB;
extern PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_glMultiDrawArraysIndirectCount;
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_glMultiDrawArraysIndirectCountARB;
extern PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_glMultiDrawElementsIndirectCount;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_glMultiDrawElementsIndirectCountARB;
extern PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;
extern PFNGLMULTITEXCOORD1DARBPROC glad_glMultiTexCoord1dARB;
extern PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;
extern PFNGLMULTITEXCOORD1DVARBPROC glad_glMultiTexCoord1dvARB;
extern PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;
extern PFNGLMULTITEXCOORD1FARBPROC glad_glMultiTexCoord1fARB;
extern PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;
extern PFNGLMULTITEXCOORD1FVARBPROC glad_glMultiTexCoord1fvARB;
extern PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;
extern PFNGLMULTITEXCOORD1IARBPROC glad_glMultiTexCoord1iARB;
extern PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;
extern PFNGLMULTITEXCOORD1IVARBPROC glad_glMultiTexCoord1ivARB;
extern PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;
extern PFNGLMULTITEXCOORD1SARBPROC glad_glMultiTexCoord1sARB;
extern PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;
extern PFNGLMULTITEXCOORD1SVARBPROC glad_glMultiTexCoord1svARB;
extern PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;
extern PFNGLMULTITEXCOORD2DARBPROC glad_glMultiTexCoord2dARB;
extern PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;
extern PFNGLMULTITEXCOORD2DVARBPROC glad_glMultiTexCoord2dvARB;
extern PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;
extern PFNGLMULTITEXCOORD2FARBPROC glad_glMultiTexCoord2fARB;
extern PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;
extern PFNGLMULTITEXCOORD2FVARBPROC glad_glMultiTexCoord2fvARB;
extern PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;
extern PFNGLMULTITEXCOORD2IARBPROC glad_glMultiTexCoord2iARB;
extern PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;
extern PFNGLMULTITEXCOORD2IVARBPROC glad_glMultiTexCoord2ivARB;
extern PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;
extern PFNGLMULTITEXCOORD2SARBPROC glad_glMultiTexCoord2sARB;
extern PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;
extern PFNGLMULTITEXCOORD2SVARBPROC glad_glMultiTexCoord2svARB;
extern PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;
extern PFNGLMULTITEXCOORD3DARBPROC glad_glMultiTexCoord3dARB;
extern PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;
extern PFNGLMULTITEXCOORD3DVARBPROC glad_glMultiTexCoord3dvARB;
extern PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;
extern PFNGLMULTITEXCOORD3FARBPROC glad_glMultiTexCoord3fARB;
extern PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;
extern PFNGLMULTITEXCOORD3FVARBPROC glad_glMultiTexCoord3fvARB;
extern PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;
extern PFNGLMULTITEXCOORD3IARBPROC glad_glMultiTexCoord3iARB;
extern PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;
extern PFNGLMULTITEXCOORD3IVARBPROC glad_glMultiTexCoord3ivARB;
extern PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;
extern PFNGLMULTITEXCOORD3SARBPROC glad_glMultiTexCoord3sARB;
extern PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;
extern PFNGLMULTITEXCOORD3SVARBPROC glad_glMultiTexCoord3svARB;
extern PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;
extern PFNGLMULTITEXCOORD4DARBPROC glad_glMultiTexCoord4dARB;
extern PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;
extern PFNGLMULTITEXCOORD4DVARBPROC glad_glMultiTexCoord4dvARB;
extern PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;
extern PFNGLMULTITEXCOORD4FARBPROC glad_glMultiTexCoord4fARB;
extern PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;
extern PFNGLMULTITEXCOORD4FVARBPROC glad_glMultiTexCoord4fvARB;
extern PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;
extern PFNGLMULTITEXCOORD4IARBPROC glad_glMultiTexCoord4iARB;
extern PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;
extern PFNGLMULTITEXCOORD4IVARBPROC glad_glMultiTexCoord4ivARB;
extern PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;
extern PFNGLMULTITEXCOORD4SARBPROC glad_glMultiTexCoord4sARB;
extern PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;
extern PFNGLMULTITEXCOORD4SVARBPROC glad_glMultiTexCoord4svARB;
extern PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
extern PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
extern PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
extern PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
extern PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
extern PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
extern PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
extern PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
extern PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glad_glNamedBufferPageCommitmentARB;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glad_glNamedBufferPageCommitmentEXT;
extern PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;
extern PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glNamedFramebufferSampleLocationsfvARB;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;
extern PFNGLNAMEDSTRINGARBPROC glad_glNamedStringARB;
extern PFNGLNEWLISTPROC glad_glNewList;
extern PFNGLNORMAL3BPROC glad_glNormal3b;
extern PFNGLNORMAL3BVPROC glad_glNormal3bv;
extern PFNGLNORMAL3DPROC glad_glNormal3d;
extern PFNGLNORMAL3DVPROC glad_glNormal3dv;
extern PFNGLNORMAL3FPROC glad_glNormal3f;
extern PFNGLNORMAL3FVPROC glad_glNormal3fv;
extern PFNGLNORMAL3IPROC glad_glNormal3i;
extern PFNGLNORMAL3IVPROC glad_glNormal3iv;
extern PFNGLNORMAL3SPROC glad_glNormal3s;
extern PFNGLNORMAL3SVPROC glad_glNormal3sv;
extern PFNGLNORMALP3UIPROC glad_glNormalP3ui;
extern PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
extern PFNGLNORMALPOINTERPROC glad_glNormalPointer;
extern PFNGLOBJECTLABELPROC glad_glObjectLabel;
extern PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;
extern PFNGLORTHOPROC glad_glOrtho;
extern PFNGLPASSTHROUGHPROC glad_glPassThrough;
extern PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
extern PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
extern PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
extern PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
extern PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
extern PFNGLPIXELSTOREFPROC glad_glPixelStoref;
extern PFNGLPIXELSTOREIPROC glad_glPixelStorei;
extern PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
extern PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
extern PFNGLPIXELZOOMPROC glad_glPixelZoom;
extern PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
extern PFNGLPOINTPARAMETERFARBPROC glad_glPointParameterfARB;
extern PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
extern PFNGLPOINTPARAMETERFVARBPROC glad_glPointParameterfvARB;
extern PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
extern PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
extern PFNGLPOINTSIZEPROC glad_glPointSize;
extern PFNGLPOLYGONMODEPROC glad_glPolygonMode;
extern PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
extern PFNGLPOLYGONOFFSETCLAMPPROC glad_glPolygonOffsetClamp;
extern PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
extern PFNGLPOPATTRIBPROC glad_glPopAttrib;
extern PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
extern PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;
extern PFNGLPOPMATRIXPROC glad_glPopMatrix;
extern PFNGLPOPNAMEPROC glad_glPopName;
extern PFNGLPRIMITIVEBOUNDINGBOXPROC glad_glPrimitiveBoundingBox;
extern PFNGLPRIMITIVEBOUNDINGBOXARBPROC glad_glPrimitiveBoundingBoxARB;
extern PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
extern PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
extern PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
extern PFNGLPROGRAMENVPARAMETER4DARBPROC glad_glProgramEnvParameter4dARB;
extern PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_glProgramEnvParameter4dvARB;
extern PFNGLPROGRAMENVPARAMETER4FARBPROC glad_glProgramEnvParameter4fARB;
extern PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_glProgramEnvParameter4fvARB;
extern PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_glProgramLocalParameter4dARB;
extern PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_glProgramLocalParameter4dvARB;
extern PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_glProgramLocalParameter4fARB;
extern PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_glProgramLocalParameter4fvARB;
extern PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
extern PFNGLPROGRAMPARAMETERIARBPROC glad_glProgramParameteriARB;
extern PFNGLPROGRAMSTRINGARBPROC glad_glProgramStringARB;
extern PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
extern PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
extern PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
extern PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
extern PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
extern PFNGLPROGRAMUNIFORM1I64ARBPROC glad_glProgramUniform1i64ARB;
extern PFNGLPROGRAMUNIFORM1I64VARBPROC glad_glProgramUniform1i64vARB;
extern PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
extern PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
extern PFNGLPROGRAMUNIFORM1UI64ARBPROC glad_glProgramUniform1ui64ARB;
extern PFNGLPROGRAMUNIFORM1UI64VARBPROC glad_glProgramUniform1ui64vARB;
extern PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
extern PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
extern PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
extern PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
extern PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
extern PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
extern PFNGLPROGRAMUNIFORM2I64ARBPROC glad_glProgramUniform2i64ARB;
extern PFNGLPROGRAMUNIFORM2I64VARBPROC glad_glProgramUniform2i64vARB;
extern PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
extern PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
extern PFNGLPROGRAMUNIFORM2UI64ARBPROC glad_glProgramUniform2ui64ARB;
extern PFNGLPROGRAMUNIFORM2UI64VARBPROC glad_glProgramUniform2ui64vARB;
extern PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
extern PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
extern PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
extern PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
extern PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
extern PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
extern PFNGLPROGRAMUNIFORM3I64ARBPROC glad_glProgramUniform3i64ARB;
extern PFNGLPROGRAMUNIFORM3I64VARBPROC glad_glProgramUniform3i64vARB;
extern PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
extern PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
extern PFNGLPROGRAMUNIFORM3UI64ARBPROC glad_glProgramUniform3ui64ARB;
extern PFNGLPROGRAMUNIFORM3UI64VARBPROC glad_glProgramUniform3ui64vARB;
extern PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
extern PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
extern PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
extern PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
extern PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
extern PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
extern PFNGLPROGRAMUNIFORM4I64ARBPROC glad_glProgramUniform4i64ARB;
extern PFNGLPROGRAMUNIFORM4I64VARBPROC glad_glProgramUniform4i64vARB;
extern PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
extern PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
extern PFNGLPROGRAMUNIFORM4UI64ARBPROC glad_glProgramUniform4ui64ARB;
extern PFNGLPROGRAMUNIFORM4UI64VARBPROC glad_glProgramUniform4ui64vARB;
extern PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
extern PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glad_glProgramUniformHandleui64ARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glad_glProgramUniformHandleui64vARB;
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
extern PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
extern PFNGLPUSHATTRIBPROC glad_glPushAttrib;
extern PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
extern PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;
extern PFNGLPUSHMATRIXPROC glad_glPushMatrix;
extern PFNGLPUSHNAMEPROC glad_glPushName;
extern PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
extern PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
extern PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
extern PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
extern PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
extern PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
extern PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
extern PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
extern PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
extern PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
extern PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
extern PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
extern PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
extern PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
extern PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
extern PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
extern PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
extern PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
extern PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
extern PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
extern PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
extern PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
extern PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
extern PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
extern PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
extern PFNGLREADBUFFERPROC glad_glReadBuffer;
extern PFNGLREADPIXELSPROC glad_glReadPixels;
extern PFNGLREADNPIXELSPROC glad_glReadnPixels;
extern PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;
extern PFNGLRECTDPROC glad_glRectd;
extern PFNGLRECTDVPROC glad_glRectdv;
extern PFNGLRECTFPROC glad_glRectf;
extern PFNGLRECTFVPROC glad_glRectfv;
extern PFNGLRECTIPROC glad_glRecti;
extern PFNGLRECTIVPROC glad_glRectiv;
extern PFNGLRECTSPROC glad_glRects;
extern PFNGLRECTSVPROC glad_glRectsv;
extern PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
extern PFNGLRENDERMODEPROC glad_glRenderMode;
extern PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
extern PFNGLRESETHISTOGRAMPROC glad_glResetHistogram;
extern PFNGLRESETMINMAXPROC glad_glResetMinmax;
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
extern PFNGLROTATEDPROC glad_glRotated;
extern PFNGLROTATEFPROC glad_glRotatef;
extern PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
extern PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB;
extern PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
extern PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
extern PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
extern PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
extern PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
extern PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
extern PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
extern PFNGLSCALEDPROC glad_glScaled;
extern PFNGLSCALEFPROC glad_glScalef;
extern PFNGLSCISSORPROC glad_glScissor;
extern PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
extern PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
extern PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
extern PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;
extern PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;
extern PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;
extern PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;
extern PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;
extern PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;
extern PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;
extern PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;
extern PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;
extern PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;
extern PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;
extern PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;
extern PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;
extern PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;
extern PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;
extern PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;
extern PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
extern PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
extern PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;
extern PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
extern PFNGLSEPARABLEFILTER2DPROC glad_glSeparableFilter2D;
extern PFNGLSHADEMODELPROC glad_glShadeModel;
extern PFNGLSHADERBINARYPROC glad_glShaderBinary;
extern PFNGLSHADERSOURCEPROC glad_glShaderSource;
extern PFNGLSHADERSOURCEARBPROC glad_glShaderSourceARB;
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;
extern PFNGLSPECIALIZESHADERPROC glad_glSpecializeShader;
extern PFNGLSPECIALIZESHADERARBPROC glad_glSpecializeShaderARB;
extern PFNGLSTENCILFUNCPROC glad_glStencilFunc;
extern PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
extern PFNGLSTENCILMASKPROC glad_glStencilMask;
extern PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
extern PFNGLSTENCILOPPROC glad_glStencilOp;
extern PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
extern PFNGLTEXBUFFERPROC glad_glTexBuffer;
extern PFNGLTEXBUFFERARBPROC glad_glTexBufferARB;
extern PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;
extern PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
extern PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
extern PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
extern PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
extern PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
extern PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
extern PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
extern PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
extern PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
extern PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
extern PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
extern PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
extern PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
extern PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
extern PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
extern PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
extern PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
extern PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
extern PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
extern PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
extern PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
extern PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
extern PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
extern PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
extern PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
extern PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
extern PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
extern PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
extern PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
extern PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
extern PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
extern PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
extern PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
extern PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
extern PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
extern PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
extern PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
extern PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
extern PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
extern PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
extern PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
extern PFNGLTEXENVFPROC glad_glTexEnvf;
extern PFNGLTEXENVFVPROC glad_glTexEnvfv;
extern PFNGLTEXENVIPROC glad_glTexEnvi;
extern PFNGLTEXENVIVPROC glad_glTexEnviv;
extern PFNGLTEXGENDPROC glad_glTexGend;
extern PFNGLTEXGENDVPROC glad_glTexGendv;
extern PFNGLTEXGENFPROC glad_glTexGenf;
extern PFNGLTEXGENFVPROC glad_glTexGenfv;
extern PFNGLTEXGENIPROC glad_glTexGeni;
extern PFNGLTEXGENIVPROC glad_glTexGeniv;
extern PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
extern PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
extern PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
extern PFNGLTEXPAGECOMMITMENTARBPROC glad_glTexPageCommitmentARB;
extern PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
extern PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
extern PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
extern PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
extern PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
extern PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
extern PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;
extern PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;
extern PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;
extern PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
extern PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
extern PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
extern PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;
extern PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;
extern PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;
extern PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;
extern PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;
extern PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;
extern PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;
extern PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;
extern PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;
extern PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;
extern PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;
extern PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;
extern PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;
extern PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;
extern PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;
extern PFNGLTEXTUREVIEWPROC glad_glTextureView;
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
extern PFNGLTRANSLATEDPROC glad_glTranslated;
extern PFNGLTRANSLATEFPROC glad_glTranslatef;
extern PFNGLUNIFORM1DPROC glad_glUniform1d;
extern PFNGLUNIFORM1DVPROC glad_glUniform1dv;
extern PFNGLUNIFORM1FPROC glad_glUniform1f;
extern PFNGLUNIFORM1FARBPROC glad_glUniform1fARB;
extern PFNGLUNIFORM1FVPROC glad_glUniform1fv;
extern PFNGLUNIFORM1FVARBPROC glad_glUniform1fvARB;
extern PFNGLUNIFORM1IPROC glad_glUniform1i;
extern PFNGLUNIFORM1I64ARBPROC glad_glUniform1i64ARB;
extern PFNGLUNIFORM1I64VARBPROC glad_glUniform1i64vARB;
extern PFNGLUNIFORM1IARBPROC glad_glUniform1iARB;
extern PFNGLUNIFORM1IVPROC glad_glUniform1iv;
extern PFNGLUNIFORM1IVARBPROC glad_glUniform1ivARB;
extern PFNGLUNIFORM1UIPROC glad_glUniform1ui;
extern PFNGLUNIFORM1UI64ARBPROC glad_glUniform1ui64ARB;
extern PFNGLUNIFORM1UI64VARBPROC glad_glUniform1ui64vARB;
extern PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
extern PFNGLUNIFORM2DPROC glad_glUniform2d;
extern PFNGLUNIFORM2DVPROC glad_glUniform2dv;
extern PFNGLUNIFORM2FPROC glad_glUniform2f;
extern PFNGLUNIFORM2FARBPROC glad_glUniform2fARB;
extern PFNGLUNIFORM2FVPROC glad_glUniform2fv;
extern PFNGLUNIFORM2FVARBPROC glad_glUniform2fvARB;
extern PFNGLUNIFORM2IPROC glad_glUniform2i;
extern PFNGLUNIFORM2I64ARBPROC glad_glUniform2i64ARB;
extern PFNGLUNIFORM2I64VARBPROC glad_glUniform2i64vARB;
extern PFNGLUNIFORM2IARBPROC glad_glUniform2iARB;
extern PFNGLUNIFORM2IVPROC glad_glUniform2iv;
extern PFNGLUNIFORM2IVARBPROC glad_glUniform2ivARB;
extern PFNGLUNIFORM2UIPROC glad_glUniform2ui;
extern PFNGLUNIFORM2UI64ARBPROC glad_glUniform2ui64ARB;
extern PFNGLUNIFORM2UI64VARBPROC glad_glUniform2ui64vARB;
extern PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
extern PFNGLUNIFORM3DPROC glad_glUniform3d;
extern PFNGLUNIFORM3DVPROC glad_glUniform3dv;
extern PFNGLUNIFORM3FPROC glad_glUniform3f;
extern PFNGLUNIFORM3FARBPROC glad_glUniform3fARB;
extern PFNGLUNIFORM3FVPROC glad_glUniform3fv;
extern PFNGLUNIFORM3FVARBPROC glad_glUniform3fvARB;
extern PFNGLUNIFORM3IPROC glad_glUniform3i;
extern PFNGLUNIFORM3I64ARBPROC glad_glUniform3i64ARB;
extern PFNGLUNIFORM3I64VARBPROC glad_glUniform3i64vARB;
extern PFNGLUNIFORM3IARBPROC glad_glUniform3iARB;
extern PFNGLUNIFORM3IVPROC glad_glUniform3iv;
extern PFNGLUNIFORM3IVARBPROC glad_glUniform3ivARB;
extern PFNGLUNIFORM3UIPROC glad_glUniform3ui;
extern PFNGLUNIFORM3UI64ARBPROC glad_glUniform3ui64ARB;
extern PFNGLUNIFORM3UI64VARBPROC glad_glUniform3ui64vARB;
extern PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
extern PFNGLUNIFORM4DPROC glad_glUniform4d;
extern PFNGLUNIFORM4DVPROC glad_glUniform4dv;
extern PFNGLUNIFORM4FPROC glad_glUniform4f;
extern PFNGLUNIFORM4FARBPROC glad_glUniform4fARB;
extern PFNGLUNIFORM4FVPROC glad_glUniform4fv;
extern PFNGLUNIFORM4FVARBPROC glad_glUniform4fvARB;
extern PFNGLUNIFORM4IPROC glad_glUniform4i;
extern PFNGLUNIFORM4I64ARBPROC glad_glUniform4i64ARB;
extern PFNGLUNIFORM4I64VARBPROC glad_glUniform4i64vARB;
extern PFNGLUNIFORM4IARBPROC glad_glUniform4iARB;
extern PFNGLUNIFORM4IVPROC glad_glUniform4iv;
extern PFNGLUNIFORM4IVARBPROC glad_glUniform4ivARB;
extern PFNGLUNIFORM4UIPROC glad_glUniform4ui;
extern PFNGLUNIFORM4UI64ARBPROC glad_glUniform4ui64ARB;
extern PFNGLUNIFORM4UI64VARBPROC glad_glUniform4ui64vARB;
extern PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
extern PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
extern PFNGLUNIFORMHANDLEUI64ARBPROC glad_glUniformHandleui64ARB;
extern PFNGLUNIFORMHANDLEUI64VARBPROC glad_glUniformHandleui64vARB;
extern PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
extern PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
extern PFNGLUNIFORMMATRIX2FVARBPROC glad_glUniformMatrix2fvARB;
extern PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
extern PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
extern PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
extern PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
extern PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
extern PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
extern PFNGLUNIFORMMATRIX3FVARBPROC glad_glUniformMatrix3fvARB;
extern PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
extern PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
extern PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
extern PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
extern PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
extern PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
extern PFNGLUNIFORMMATRIX4FVARBPROC glad_glUniformMatrix4fvARB;
extern PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
extern PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
extern PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
extern PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
extern PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
extern PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
extern PFNGLUNMAPBUFFERARBPROC glad_glUnmapBufferARB;
extern PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;
extern PFNGLUSEPROGRAMPROC glad_glUseProgram;
extern PFNGLUSEPROGRAMOBJECTARBPROC glad_glUseProgramObjectARB;
extern PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
extern PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
extern PFNGLVALIDATEPROGRAMARBPROC glad_glValidateProgramARB;
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
extern PFNGLVERTEX2DPROC glad_glVertex2d;
extern PFNGLVERTEX2DVPROC glad_glVertex2dv;
extern PFNGLVERTEX2FPROC glad_glVertex2f;
extern PFNGLVERTEX2FVPROC glad_glVertex2fv;
extern PFNGLVERTEX2IPROC glad_glVertex2i;
extern PFNGLVERTEX2IVPROC glad_glVertex2iv;
extern PFNGLVERTEX2SPROC glad_glVertex2s;
extern PFNGLVERTEX2SVPROC glad_glVertex2sv;
extern PFNGLVERTEX3DPROC glad_glVertex3d;
extern PFNGLVERTEX3DVPROC glad_glVertex3dv;
extern PFNGLVERTEX3FPROC glad_glVertex3f;
extern PFNGLVERTEX3FVPROC glad_glVertex3fv;
extern PFNGLVERTEX3IPROC glad_glVertex3i;
extern PFNGLVERTEX3IVPROC glad_glVertex3iv;
extern PFNGLVERTEX3SPROC glad_glVertex3s;
extern PFNGLVERTEX3SVPROC glad_glVertex3sv;
extern PFNGLVERTEX4DPROC glad_glVertex4d;
extern PFNGLVERTEX4DVPROC glad_glVertex4dv;
extern PFNGLVERTEX4FPROC glad_glVertex4f;
extern PFNGLVERTEX4FVPROC glad_glVertex4fv;
extern PFNGLVERTEX4IPROC glad_glVertex4i;
extern PFNGLVERTEX4IVPROC glad_glVertex4iv;
extern PFNGLVERTEX4SPROC glad_glVertex4s;
extern PFNGLVERTEX4SVPROC glad_glVertex4sv;
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;
extern PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;
extern PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
extern PFNGLVERTEXATTRIB1DARBPROC glad_glVertexAttrib1dARB;
extern PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
extern PFNGLVERTEXATTRIB1DVARBPROC glad_glVertexAttrib1dvARB;
extern PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
extern PFNGLVERTEXATTRIB1FARBPROC glad_glVertexAttrib1fARB;
extern PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
extern PFNGLVERTEXATTRIB1FVARBPROC glad_glVertexAttrib1fvARB;
extern PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
extern PFNGLVERTEXATTRIB1SARBPROC glad_glVertexAttrib1sARB;
extern PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
extern PFNGLVERTEXATTRIB1SVARBPROC glad_glVertexAttrib1svARB;
extern PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
extern PFNGLVERTEXATTRIB2DARBPROC glad_glVertexAttrib2dARB;
extern PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
extern PFNGLVERTEXATTRIB2DVARBPROC glad_glVertexAttrib2dvARB;
extern PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
extern PFNGLVERTEXATTRIB2FARBPROC glad_glVertexAttrib2fARB;
extern PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
extern PFNGLVERTEXATTRIB2FVARBPROC glad_glVertexAttrib2fvARB;
extern PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
extern PFNGLVERTEXATTRIB2SARBPROC glad_glVertexAttrib2sARB;
extern PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
extern PFNGLVERTEXATTRIB2SVARBPROC glad_glVertexAttrib2svARB;
extern PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
extern PFNGLVERTEXATTRIB3DARBPROC glad_glVertexAttrib3dARB;
extern PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
extern PFNGLVERTEXATTRIB3DVARBPROC glad_glVertexAttrib3dvARB;
extern PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
extern PFNGLVERTEXATTRIB3FARBPROC glad_glVertexAttrib3fARB;
extern PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
extern PFNGLVERTEXATTRIB3FVARBPROC glad_glVertexAttrib3fvARB;
extern PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
extern PFNGLVERTEXATTRIB3SARBPROC glad_glVertexAttrib3sARB;
extern PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
extern PFNGLVERTEXATTRIB3SVARBPROC glad_glVertexAttrib3svARB;
extern PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
extern PFNGLVERTEXATTRIB4NBVARBPROC glad_glVertexAttrib4NbvARB;
extern PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
extern PFNGLVERTEXATTRIB4NIVARBPROC glad_glVertexAttrib4NivARB;
extern PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
extern PFNGLVERTEXATTRIB4NSVARBPROC glad_glVertexAttrib4NsvARB;
extern PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
extern PFNGLVERTEXATTRIB4NUBARBPROC glad_glVertexAttrib4NubARB;
extern PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
extern PFNGLVERTEXATTRIB4NUBVARBPROC glad_glVertexAttrib4NubvARB;
extern PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
extern PFNGLVERTEXATTRIB4NUIVARBPROC glad_glVertexAttrib4NuivARB;
extern PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
extern PFNGLVERTEXATTRIB4NUSVARBPROC glad_glVertexAttrib4NusvARB;
extern PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
extern PFNGLVERTEXATTRIB4BVARBPROC glad_glVertexAttrib4bvARB;
extern PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
extern PFNGLVERTEXATTRIB4DARBPROC glad_glVertexAttrib4dARB;
extern PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
extern PFNGLVERTEXATTRIB4DVARBPROC glad_glVertexAttrib4dvARB;
extern PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
extern PFNGLVERTEXATTRIB4FARBPROC glad_glVertexAttrib4fARB;
extern PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
extern PFNGLVERTEXATTRIB4FVARBPROC glad_glVertexAttrib4fvARB;
extern PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
extern PFNGLVERTEXATTRIB4IVARBPROC glad_glVertexAttrib4ivARB;
extern PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
extern PFNGLVERTEXATTRIB4SARBPROC glad_glVertexAttrib4sARB;
extern PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
extern PFNGLVERTEXATTRIB4SVARBPROC glad_glVertexAttrib4svARB;
extern PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
extern PFNGLVERTEXATTRIB4UBVARBPROC glad_glVertexAttrib4ubvARB;
extern PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
extern PFNGLVERTEXATTRIB4UIVARBPROC glad_glVertexAttrib4uivARB;
extern PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
extern PFNGLVERTEXATTRIB4USVARBPROC glad_glVertexAttrib4usvARB;
extern PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;
extern PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
extern PFNGLVERTEXATTRIBDIVISORARBPROC glad_glVertexAttribDivisorARB;
extern PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;
extern PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
extern PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
extern PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
extern PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
extern PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
extern PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
extern PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
extern PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
extern PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
extern PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
extern PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
extern PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
extern PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
extern PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
extern PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
extern PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
extern PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
extern PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
extern PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
extern PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
extern PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;
extern PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
extern PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
extern PFNGLVERTEXATTRIBL1UI64ARBPROC glad_glVertexAttribL1ui64ARB;
extern PFNGLVERTEXATTRIBL1UI64VARBPROC glad_glVertexAttribL1ui64vARB;
extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
extern PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;
extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
extern PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB;
extern PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;
extern PFNGLVERTEXBLENDARBPROC glad_glVertexBlendARB;
extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
extern PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
extern PFNGLVIEWPORTPROC glad_glViewport;
extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
extern PFNGLWAITSYNCPROC glad_glWaitSync;
extern PFNGLWEIGHTPOINTERARBPROC glad_glWeightPointerARB;
extern PFNGLWEIGHTBVARBPROC glad_glWeightbvARB;
extern PFNGLWEIGHTDVARBPROC glad_glWeightdvARB;
extern PFNGLWEIGHTFVARBPROC glad_glWeightfvARB;
extern PFNGLWEIGHTIVARBPROC glad_glWeightivARB;
extern PFNGLWEIGHTSVARBPROC glad_glWeightsvARB;
extern PFNGLWEIGHTUBVARBPROC glad_glWeightubvARB;
extern PFNGLWEIGHTUIVARBPROC glad_glWeightuivARB;
extern PFNGLWEIGHTUSVARBPROC glad_glWeightusvARB;
extern PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;
extern PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB;
extern PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;
extern PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB;
extern PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;
extern PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB;
extern PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;
extern PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB;
extern PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;
extern PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB;
extern PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;
extern PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB;
extern PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;
extern PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB;
extern PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;
extern PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB;
extern PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;
extern PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB;
extern PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;
extern PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB;
extern PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;
extern PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB;
extern PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;
extern PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB;
extern PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;
extern PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB;
extern PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;
extern PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB;
extern PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;
extern PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB;
extern PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;
extern PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB;
extern int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr);
extern int gladLoadGL( GLADloadfunc load);
]])
local _M = {}
function _M.vec2(x,y)
   local v = ffi.new("union vec2")
   v.x = x
   v.y = y
   return v
end
function _M.vec3(x,y,z)
   local v = ffi.new("union vec3")
   v.x = x
   v.y = y
   v.z = z
   return v
end
function _M.vec4(x,y,z,w)
   local v = ffi.new("union vec4")
   v.x = x
   v.y = y
   v.z = z
   v.w = w
   return v
end
function _M.quat(x,y,z,w)
   local q = ffi.new("union quat")
   v.x = x
   v.y = y
   v.z = z
   v.w = w
   return q
end
function _M.mat44()
   local m = ffi.new("float [16]")
   return m
end

local v4k = ffi.load("v4k")

return setmetatable( _M, {
   __index = function( table, key )
      return v4k[ key ]
   end
} )

